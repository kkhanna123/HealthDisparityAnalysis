{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-755c24dd-9b2c-4f05-9812-888f8520d67e.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1658886285240,"exec_count":4,"id":"88adc0","input":"finalDataset.columns","kernel":"python3","output":{"0":{"data":{"text/plain":"Index(['stateInitials', 'stateName', 'countyName', 'countyID', 'tractID',\n       'population', 'noHealthInsurance%', 'arthritis%', 'bingeDrinking%',\n       'highBP%', 'medicineToLowerBP%', 'nonSkinCancer%', 'currentAsthma%',\n       'cervicalCancer%', 'coronaryHeartDisease%', 'routineCheckUp%',\n       'cholestorolScreening%', 'colonScreening%',\n       'chronicObstructivePulmonaryDisease%',\n       'menUpToDateOnVaccinesAndScreenings%',\n       'womenUpToDateOnVaccinesAndScreenings%', 'currentSmoking%',\n       'routineDentalCheckup%', 'depression%', 'diabetes%',\n       'fairOrGoodHealth%', 'highCholestorol%', 'chronicKidneyDisease%',\n       'noLeisurelyPhysicalActivity%', 'mammographyUseWomen%',\n       'badMentalHealth%', 'obesity%', 'badPhysicalHealth%',\n       'lessThan7HoursOfSleep%', 'stroke%', 'allTeethLost%', 'state', 'county',\n       'totalPop', 'men', 'women', 'hispanic', 'white', 'black', 'native',\n       'asian', 'pacific', 'votingAgeCitizen', 'income', 'incomeErr',\n       'incomePerCap', 'incomePerCapErr', 'poverty', 'childPoverty',\n       'professional', 'service', 'office', 'construction', 'production',\n       'drive', 'carpool', 'transit', 'walk', 'otherTransp', 'workAtHome',\n       'meanCommute', 'employed', 'privateWork', 'publicWork', 'selfEmployed',\n       'familyWork', 'unemployment', '%LessThan9thGrade',\n       '%HighSchoolGraduate', '%SomeCollege,NoDegree', '%AssociatesDegree',\n       '%BachelorsDegree', '%GraduateOrProfessionalDegree',\n       '%PercentHighSchoolGraduateOrHigher', '%PercentBachelorsDegreeOrHigher',\n       '%PovertyLessThanHighSchoolGraduate', '%PovertyHighSchoolGraduate',\n       '%PovertySomeCollegeOrAssociatesDegree',\n       '%PovertyBachelorsDegreeOrHigher'],\n      dtype='object')"},"exec_count":4}},"pos":7,"scrolled":true,"start":1658886285224,"state":"done","type":"cell"}
{"cell_type":"code","end":1658888002999,"exec_count":33,"id":"c5774a","input":"county_df.head()","kernel":"python3","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>arthritis%</th>\n      <th>population</th>\n      <th>highBP%</th>\n      <th>normalizedArthritis%</th>\n      <th>nonSkinCancer%</th>\n      <th>normalizedHighBP%</th>\n      <th>currentAsthma%</th>\n      <th>normalizedNonSkinCancer%</th>\n      <th>coronaryHeartDisease%</th>\n      <th>normalizedCurrentAsthma%</th>\n      <th>...</th>\n      <th>normalized%PercentHighSchoolGraduateOrHigher</th>\n      <th>%PovertyLessThanHighSchoolGraduate</th>\n      <th>normalized%PercentBachelorsDegreeOrHigher</th>\n      <th>%PovertyHighSchoolGraduate</th>\n      <th>normalized%PovertyLessThanHighSchoolGraduate</th>\n      <th>%PovertySomeCollegeOrAssociatesDegree</th>\n      <th>normalized%PovertyHighSchoolGraduate</th>\n      <th>%PovertyBachelorsDegreeOrHigher</th>\n      <th>normalized%PovertySomeCollegeOrAssociatesDegree</th>\n      <th>normalized%PovertyBachelorsDegreeOrHigher</th>\n    </tr>\n    <tr>\n      <th>countyName</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Abbeville</th>\n      <td>31.82</td>\n      <td>25417</td>\n      <td>43.21</td>\n      <td>0.623985</td>\n      <td>7.62</td>\n      <td>0.692215</td>\n      <td>10.36</td>\n      <td>0.508523</td>\n      <td>8.39</td>\n      <td>0.385892</td>\n      <td>...</td>\n      <td>0.648955</td>\n      <td>36.07</td>\n      <td>0.136413</td>\n      <td>20.30</td>\n      <td>0.417477</td>\n      <td>13.85</td>\n      <td>0.429315</td>\n      <td>7.66</td>\n      <td>0.337970</td>\n      <td>0.324576</td>\n    </tr>\n    <tr>\n      <th>Acadia</th>\n      <td>29.38</td>\n      <td>61773</td>\n      <td>40.52</td>\n      <td>0.529594</td>\n      <td>6.95</td>\n      <td>0.611044</td>\n      <td>10.38</td>\n      <td>0.413352</td>\n      <td>8.04</td>\n      <td>0.388658</td>\n      <td>...</td>\n      <td>0.630139</td>\n      <td>35.12</td>\n      <td>0.102208</td>\n      <td>17.59</td>\n      <td>0.406481</td>\n      <td>15.02</td>\n      <td>0.370555</td>\n      <td>4.43</td>\n      <td>0.366520</td>\n      <td>0.187712</td>\n    </tr>\n    <tr>\n      <th>Accomack</th>\n      <td>32.44</td>\n      <td>33159</td>\n      <td>43.36</td>\n      <td>0.647969</td>\n      <td>7.95</td>\n      <td>0.696741</td>\n      <td>10.52</td>\n      <td>0.555398</td>\n      <td>8.47</td>\n      <td>0.408022</td>\n      <td>...</td>\n      <td>0.706620</td>\n      <td>27.79</td>\n      <td>0.199646</td>\n      <td>14.32</td>\n      <td>0.321644</td>\n      <td>13.58</td>\n      <td>0.299653</td>\n      <td>3.64</td>\n      <td>0.331381</td>\n      <td>0.154237</td>\n    </tr>\n    <tr>\n      <th>Ada</th>\n      <td>21.22</td>\n      <td>383772</td>\n      <td>27.06</td>\n      <td>0.213926</td>\n      <td>6.23</td>\n      <td>0.204888</td>\n      <td>9.29</td>\n      <td>0.311080</td>\n      <td>4.71</td>\n      <td>0.237898</td>\n      <td>...</td>\n      <td>0.927178</td>\n      <td>23.07</td>\n      <td>0.436222</td>\n      <td>13.18</td>\n      <td>0.267014</td>\n      <td>10.10</td>\n      <td>0.274935</td>\n      <td>5.26</td>\n      <td>0.246462</td>\n      <td>0.222881</td>\n    </tr>\n    <tr>\n      <th>Adair</th>\n      <td>30.90</td>\n      <td>72041</td>\n      <td>38.30</td>\n      <td>0.588395</td>\n      <td>7.47</td>\n      <td>0.544056</td>\n      <td>10.98</td>\n      <td>0.487216</td>\n      <td>8.64</td>\n      <td>0.471646</td>\n      <td>...</td>\n      <td>0.743554</td>\n      <td>31.26</td>\n      <td>0.211229</td>\n      <td>18.88</td>\n      <td>0.361806</td>\n      <td>15.50</td>\n      <td>0.398526</td>\n      <td>6.96</td>\n      <td>0.378233</td>\n      <td>0.294915</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 125 columns</p>\n</div>","text/plain":"            arthritis%  population  highBP%  normalizedArthritis%  \\\ncountyName                                                          \nAbbeville        31.82       25417    43.21              0.623985   \nAcadia           29.38       61773    40.52              0.529594   \nAccomack         32.44       33159    43.36              0.647969   \nAda              21.22      383772    27.06              0.213926   \nAdair            30.90       72041    38.30              0.588395   \n\n            nonSkinCancer%  normalizedHighBP%  currentAsthma%  \\\ncountyName                                                      \nAbbeville             7.62           0.692215           10.36   \nAcadia                6.95           0.611044           10.38   \nAccomack              7.95           0.696741           10.52   \nAda                   6.23           0.204888            9.29   \nAdair                 7.47           0.544056           10.98   \n\n            normalizedNonSkinCancer%  coronaryHeartDisease%  \\\ncountyName                                                    \nAbbeville                   0.508523                   8.39   \nAcadia                      0.413352                   8.04   \nAccomack                    0.555398                   8.47   \nAda                         0.311080                   4.71   \nAdair                       0.487216                   8.64   \n\n            normalizedCurrentAsthma%  ...  \\\ncountyName                            ...   \nAbbeville                   0.385892  ...   \nAcadia                      0.388658  ...   \nAccomack                    0.408022  ...   \nAda                         0.237898  ...   \nAdair                       0.471646  ...   \n\n            normalized%PercentHighSchoolGraduateOrHigher  \\\ncountyName                                                 \nAbbeville                                       0.648955   \nAcadia                                          0.630139   \nAccomack                                        0.706620   \nAda                                             0.927178   \nAdair                                           0.743554   \n\n            %PovertyLessThanHighSchoolGraduate  \\\ncountyName                                       \nAbbeville                                36.07   \nAcadia                                   35.12   \nAccomack                                 27.79   \nAda                                      23.07   \nAdair                                    31.26   \n\n            normalized%PercentBachelorsDegreeOrHigher  \\\ncountyName                                              \nAbbeville                                    0.136413   \nAcadia                                       0.102208   \nAccomack                                     0.199646   \nAda                                          0.436222   \nAdair                                        0.211229   \n\n            %PovertyHighSchoolGraduate  \\\ncountyName                               \nAbbeville                        20.30   \nAcadia                           17.59   \nAccomack                         14.32   \nAda                              13.18   \nAdair                            18.88   \n\n            normalized%PovertyLessThanHighSchoolGraduate  \\\ncountyName                                                 \nAbbeville                                       0.417477   \nAcadia                                          0.406481   \nAccomack                                        0.321644   \nAda                                             0.267014   \nAdair                                           0.361806   \n\n            %PovertySomeCollegeOrAssociatesDegree  \\\ncountyName                                          \nAbbeville                                   13.85   \nAcadia                                      15.02   \nAccomack                                    13.58   \nAda                                         10.10   \nAdair                                       15.50   \n\n            normalized%PovertyHighSchoolGraduate  \\\ncountyName                                         \nAbbeville                               0.429315   \nAcadia                                  0.370555   \nAccomack                                0.299653   \nAda                                     0.274935   \nAdair                                   0.398526   \n\n            %PovertyBachelorsDegreeOrHigher  \\\ncountyName                                    \nAbbeville                              7.66   \nAcadia                                 4.43   \nAccomack                               3.64   \nAda                                    5.26   \nAdair                                  6.96   \n\n            normalized%PovertySomeCollegeOrAssociatesDegree  \\\ncountyName                                                    \nAbbeville                                          0.337970   \nAcadia                                             0.366520   \nAccomack                                           0.331381   \nAda                                                0.246462   \nAdair                                              0.378233   \n\n            normalized%PovertyBachelorsDegreeOrHigher  \ncountyName                                             \nAbbeville                                    0.324576  \nAcadia                                       0.187712  \nAccomack                                     0.154237  \nAda                                          0.222881  \nAdair                                        0.294915  \n\n[5 rows x 125 columns]"},"exec_count":33}},"pos":31,"start":1658888002973,"state":"done","type":"cell"}
{"cell_type":"code","end":1658888004750,"exec_count":34,"id":"9ad1a5","input":"lowInc = county_df[county_df['income']<50000]\nmedInc = county_df[(county_df['income']<100000)][(county_df['income']>=50000)]\nhighInc = county_df[county_df['income']>=100000]","kernel":"python3","output":{"0":{"name":"stderr","text":"/tmp/ipykernel_7620/3374654324.py:2: UserWarning: Boolean Series key will be reindexed to match DataFrame index.\n  medInc = county_df[(county_df['income']<100000)][(county_df['income']>=50000)]\n"}},"pos":32,"start":1658888004738,"state":"done","type":"cell"}
{"cell_type":"code","end":1658888315258,"exec_count":38,"id":"3fb626","input":"#It makes much more sense to look at outliers by county data rather than tract data. Tracts are too small to prevent outliers with low population, and are usually dependent on their respective county for their services.\n\n#One problem with aggregating tract data into county data is that we can't just take the average of prevalence percentage columns, (such as arthritis%) as a low population tract can easily influence the data with a significantly different percentage from the norm. To solve this, we implemented a weighted average function, so we can accurately get the average in each county.\ndef weighted_average(distribution, populations):\n    numerator = sum(distribution[i]*populations[i] for i in range(len(distribution)))\n    denominator = sum(populations)\n    \n    return round(numerator/denominator, 2)\n\n#Grouping the data by county so it's easier to access\ncounty_info = finalDataset.groupby(['countyName'])\n\n#Initializing the county dataframe\ncounty_df = pd.DataFrame([])\n\n#Placeholder index so the code knows where to insert new columns\ni = 0\n\n#Adding the population column\ncounty_df['population'] = county_info['population'].apply(sum)\n\n#Taking the weighted average of all of the percentage columns in the tract dataframe\nfor col in  ['arthritis%',\n       'highBP%', 'nonSkinCancer%', 'currentAsthma%', 'coronaryHeartDisease%','routineCheckUp%',\n       'chronicObstructivePulmonaryDisease%', 'depression%', 'diabetes%', 'highCholestorol%', 'chronicKidneyDisease%',\n       'badMentalHealth%', 'obesity%', 'badPhysicalHealth%', 'menUpToDateOnVaccinesAndScreenings%',\n       'stroke%','noHealthInsurance%', 'men', 'women', 'hispanic', 'white', 'black', 'native',\n       'asian', 'pacific', 'votingAgeCitizen', 'income', 'incomeErr','currentSmoking%',\n       'incomePerCap', 'incomePerCapErr', 'poverty', 'childPoverty',\n       'professional', 'service', 'office', 'construction', 'production',\n       'drive', 'carpool', 'transit', 'walk', 'otherTransp', 'workAtHome',\n       'meanCommute', 'employed', 'privateWork', 'publicWork', 'selfEmployed',\n       'familyWork', 'unemployment', '%LessThan9thGrade',\n       '%HighSchoolGraduate', '%SomeCollege,NoDegree', '%AssociatesDegree',\n       '%BachelorsDegree', '%GraduateOrProfessionalDegree',\n       '%PercentHighSchoolGraduateOrHigher', '%PercentBachelorsDegreeOrHigher',\n       '%PovertyLessThanHighSchoolGraduate', '%PovertyHighSchoolGraduate',\n       '%PovertySomeCollegeOrAssociatesDegree',\n       '%PovertyBachelorsDegreeOrHigher']:\n    temp_col=[]\n    #Getting the weighted average of the column for each county and adding it to the dataframe, using the \"i\" placeholder from earlier.\n    for county in county_df.index:\n        df = county_info.get_group(county)\n        temp_col.append(weighted_average(np.array(df[col]),np.array(df.population)))\n    county_df.insert(i,col, temp_col)\n    \n    #Adding a normalized column to the dataframe.\n    string = 'normalized' + col[0].upper() + col[1:]\n    county_df[string] = [(x - np.min(temp_col))/(np.max(temp_col)-np.min(temp_col)) for x in temp_col]\n    \n    #Increasing the index for the next insertion.\n    i+=2\n\n#Adding region information to the dataframe. We can safely take the region info of the first tract per county since all tracts will be in the same region.\ncounty_df['regionInitials'] = county_info['regionInitials'].first()\n#Copying the dataframe to prevent fragmenting.\ncounty_df = county_df.copy()","kernel":"python3","output":{"0":{"name":"stderr","text":"/tmp/ipykernel_7620/3748194474.py:49: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  county_df[string] = [(x - np.min(temp_col))/(np.max(temp_col)-np.min(temp_col)) for x in temp_col]\n"},"1":{"name":"stderr","text":"/tmp/ipykernel_7620/3748194474.py:45: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  county_df.insert(i,col, temp_col)\n"},"10":{"name":"stderr","text":"/tmp/ipykernel_7620/3748194474.py:49: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  county_df[string] = [(x - np.min(temp_col))/(np.max(temp_col)-np.min(temp_col)) for x in temp_col]\n"},"11":{"name":"stderr","text":"/tmp/ipykernel_7620/3748194474.py:45: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  county_df.insert(i,col, temp_col)\n/tmp/ipykernel_7620/3748194474.py:49: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  county_df[string] = [(x - np.min(temp_col))/(np.max(temp_col)-np.min(temp_col)) for x in temp_col]\n"},"12":{"name":"stderr","text":"/tmp/ipykernel_7620/3748194474.py:45: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  county_df.insert(i,col, temp_col)\n/tmp/ipykernel_7620/3748194474.py:49: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  county_df[string] = [(x - np.min(temp_col))/(np.max(temp_col)-np.min(temp_col)) for x in temp_col]\n"},"13":{"name":"stderr","text":"/tmp/ipykernel_7620/3748194474.py:45: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  county_df.insert(i,col, temp_col)\n"},"14":{"name":"stderr","text":"/tmp/ipykernel_7620/3748194474.py:49: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  county_df[string] = [(x - np.min(temp_col))/(np.max(temp_col)-np.min(temp_col)) for x in temp_col]\n"},"15":{"name":"stderr","text":"/tmp/ipykernel_7620/3748194474.py:45: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  county_df.insert(i,col, temp_col)\n"},"16":{"name":"stderr","text":"/tmp/ipykernel_7620/3748194474.py:49: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  county_df[string] = [(x - np.min(temp_col))/(np.max(temp_col)-np.min(temp_col)) for x in temp_col]\n"},"17":{"name":"stderr","text":"/tmp/ipykernel_7620/3748194474.py:45: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  county_df.insert(i,col, temp_col)\n"},"18":{"name":"stderr","text":"/tmp/ipykernel_7620/3748194474.py:49: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  county_df[string] = [(x - np.min(temp_col))/(np.max(temp_col)-np.min(temp_col)) for x in temp_col]\n"},"19":{"name":"stderr","text":"/tmp/ipykernel_7620/3748194474.py:45: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  county_df.insert(i,col, temp_col)\n"},"2":{"name":"stderr","text":"/tmp/ipykernel_7620/3748194474.py:49: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  county_df[string] = [(x - np.min(temp_col))/(np.max(temp_col)-np.min(temp_col)) for x in temp_col]\n"},"20":{"name":"stderr","text":"/tmp/ipykernel_7620/3748194474.py:49: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  county_df[string] = [(x - np.min(temp_col))/(np.max(temp_col)-np.min(temp_col)) for x in temp_col]\n"},"21":{"ename":"KeyError","evalue":"'Column not found: regionInitials'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_7620/3748194474.py\u001b[0m in \u001b[0;36m<cell line: 55>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     53\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     54\u001b[0m \u001b[0;31m#Adding region information to the dataframe. We can safely take the region info of the first tract per county since all tracts will be in the same region.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 55\u001b[0;31m \u001b[0mcounty_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'regionInitials'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcounty_info\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'regionInitials'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfirst\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     56\u001b[0m \u001b[0;31m#Copying the dataframe to prevent fragmenting.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     57\u001b[0m \u001b[0mcounty_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcounty_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/groupby/generic.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   1336\u001b[0m                 \u001b[0mstacklevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfind_stack_level\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1337\u001b[0m             )\n\u001b[0;32m-> 1338\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getitem__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1339\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1340\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_gotitem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mndim\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msubset\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/base.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    248\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    249\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mkey\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 250\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Column not found: {key}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    251\u001b[0m             \u001b[0msubset\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    252\u001b[0m             \u001b[0mndim\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msubset\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'Column not found: regionInitials'"]},"3":{"name":"stderr","text":"/tmp/ipykernel_7620/3748194474.py:45: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  county_df.insert(i,col, temp_col)\n/tmp/ipykernel_7620/3748194474.py:49: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  county_df[string] = [(x - np.min(temp_col))/(np.max(temp_col)-np.min(temp_col)) for x in temp_col]\n"},"4":{"name":"stderr","text":"/tmp/ipykernel_7620/3748194474.py:45: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  county_df.insert(i,col, temp_col)\n/tmp/ipykernel_7620/3748194474.py:49: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  county_df[string] = [(x - np.min(temp_col))/(np.max(temp_col)-np.min(temp_col)) for x in temp_col]\n"},"5":{"name":"stderr","text":"/tmp/ipykernel_7620/3748194474.py:45: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  county_df.insert(i,col, temp_col)\n/tmp/ipykernel_7620/3748194474.py:49: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  county_df[string] = [(x - np.min(temp_col))/(np.max(temp_col)-np.min(temp_col)) for x in temp_col]\n"},"6":{"name":"stderr","text":"/tmp/ipykernel_7620/3748194474.py:45: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  county_df.insert(i,col, temp_col)\n/tmp/ipykernel_7620/3748194474.py:49: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  county_df[string] = [(x - np.min(temp_col))/(np.max(temp_col)-np.min(temp_col)) for x in temp_col]\n"},"7":{"name":"stderr","text":"/tmp/ipykernel_7620/3748194474.py:45: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  county_df.insert(i,col, temp_col)\n"},"8":{"name":"stderr","text":"/tmp/ipykernel_7620/3748194474.py:49: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  county_df[string] = [(x - np.min(temp_col))/(np.max(temp_col)-np.min(temp_col)) for x in temp_col]\n"},"9":{"name":"stderr","text":"/tmp/ipykernel_7620/3748194474.py:45: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  county_df.insert(i,col, temp_col)\n"}},"pos":30,"start":1658888248223,"state":"done","type":"cell"}
{"cell_type":"code","end":1658940762201,"exec_count":2,"id":"d75a7c","input":"finalDataset = pd.read_csv(\"../Clean Data/finalDataset.csv\")","kernel":"python3","pos":3,"start":1658940761271,"state":"done","type":"cell"}
{"cell_type":"code","end":1658940768877,"exec_count":4,"id":"ea7a7a","input":"def create_regions(initials):\n    midwest = [\"ND\", \"SD\", \"MN\", \"IA\", \"MO\", \"KS\", \"WI\", \"IL\", \"IN\", \"MI\", \"OH\", \"NE\"]\n    west = [\"CA\", \"OR\", \"WA\", \"ID\", \"MT\", \"WY\", \"UT\", \"CO\", \"NM\", \"AZ\", \"AK\", \"HI\", \"NV\"]\n    south = [\"TX\", \"OK\", \"AR\", \"LA\", \"KY\", \"TN\", \"MS\", \"AL\", \"WV\", \"DE\", \"MD\", \"DC\", \"VA\", \"NC\", \"SC\", \"GA\", \"FL\"]\n    northeast = [\"PA\", \"NY\", \"VT\", \"NH\", \"MA\", \"CT\", \"RI\", \"ME\"]\n    regions = []\n    #For each tract's state initials, classify its region based on which region array its initials are in.\n    for initial in initials:\n        if initial in midwest:\n            regions.append(\"MW\")\n        elif initial in west:\n            regions.append(\"W\")\n        elif initial in south:\n            regions.append(\"S\")\n        elif initial in northeast:\n            regions.append(\"NE\")\n        else:\n            #Sanity check (seeing if there is unclassified data)\n            regions.append(\"\")\n    return regions","kernel":"python3","pos":11,"start":1658940768857,"state":"done","type":"cell"}
{"cell_type":"code","end":1658940770415,"exec_count":5,"id":"0ff737","input":"finalDataset[\"regionInitials\"] = create_regions(finalDataset.stateInitials)","kernel":"python3","pos":12,"start":1658940770399,"state":"done","type":"cell"}
{"cell_type":"code","end":1658948554030,"exec_count":30,"id":"9a5800","input":"for healthIndicator in y_cols:\n    dtr = DecisionTreeRegressor(max_depth = 2)\n\n    Xtrain,Xtest,Ytrain,Ytest = train_test_split(X, finalDataset[healthIndicator], test_size=0.2, random_state=11)\n\n    dtr.fit(Xtrain,Ytrain)\n    fig = plt.figure(figsize=(10, 10))\n\n    plot_tree(dtr,feature_names=['noHealthInsurance%', 'men', 'women', 'hispanic', 'white', 'black', 'native',\n       'asian', 'pacific','incomePerCap', 'poverty', 'childPoverty',\n       'professional', 'service', 'office', 'construction', 'production',\n       'drive', 'carpool', 'transit', 'walk', 'otherTransp', 'workAtHome',\n       'meanCommute', 'employed', 'privateWork', 'publicWork', 'selfEmployed',\n       'familyWork', 'unemployment', '%LessThan9thGrade',\n       '%HighSchoolGraduate', '%SomeCollege,NoDegree', '%AssociatesDegree',\n       '%BachelorsDegree', '%GraduateOrProfessionalDegree',\n       '%PercentHighSchoolGraduateOrHigher', '%PercentBachelorsDegreeOrHigher',\n       '%PovertyLessThanHighSchoolGraduate', '%PovertyHighSchoolGraduate',\n       '%PovertySomeCollegeOrAssociatesDegree',\n       '%PovertyBachelorsDegreeOrHigher'])\n    plt.title(healthIndicator+\" R2 score \" + str(dtr.score(Xtest,Ytest)),fontsize=15)\n    plt.show()","kernel":"python3","output":{"0":{"data":{"image/png":"60416247026498f72b3109b5e75f59ed4b60cd97","text/plain":"<Figure size 720x720 with 1 Axes>"},"metadata":{"image/png":{"height":575,"width":572},"needs_background":"light"}},"1":{"data":{"image/png":"a823882c18cc1fdf02dbfaf8bf167e584e0e693b","text/plain":"<Figure size 720x720 with 1 Axes>"},"metadata":{"image/png":{"height":575,"width":572},"needs_background":"light"}},"10":{"data":{"image/png":"e32aca4f4515146314e27f12183b951ca1879d07","text/plain":"<Figure size 720x720 with 1 Axes>"},"metadata":{"image/png":{"height":575,"width":572},"needs_background":"light"}},"11":{"data":{"image/png":"3a747fa210f024bb2663edd64d9a4cf87a277d80","text/plain":"<Figure size 720x720 with 1 Axes>"},"metadata":{"image/png":{"height":575,"width":572},"needs_background":"light"}},"12":{"data":{"image/png":"22214c7e39f27f9de67b1922b137283cabd6eb3f","text/plain":"<Figure size 720x720 with 1 Axes>"},"metadata":{"image/png":{"height":575,"width":572},"needs_background":"light"}},"13":{"data":{"image/png":"ad4c211edd441d8866c43bea8709f1eba6c94f8b","text/plain":"<Figure size 720x720 with 1 Axes>"},"metadata":{"image/png":{"height":575,"width":572},"needs_background":"light"}},"14":{"data":{"image/png":"8c714f712b42cb659e4fe7cc06db5598512a22f0","text/plain":"<Figure size 720x720 with 1 Axes>"},"metadata":{"image/png":{"height":575,"width":572},"needs_background":"light"}},"15":{"data":{"image/png":"105167b62f0638ec07604439e385e8ef2bf913ed","text/plain":"<Figure size 720x720 with 1 Axes>"},"metadata":{"image/png":{"height":575,"width":572},"needs_background":"light"}},"16":{"data":{"image/png":"4fc537910ff82f3e6d11817d08b7446cd90f0be0","text/plain":"<Figure size 720x720 with 1 Axes>"},"metadata":{"image/png":{"height":575,"width":572},"needs_background":"light"}},"17":{"data":{"image/png":"05994ab263615b89b2002e4e22cab00dd79a706f","text/plain":"<Figure size 720x720 with 1 Axes>"},"metadata":{"image/png":{"height":575,"width":572},"needs_background":"light"}},"18":{"data":{"image/png":"4637a6729c8f3662d3bdf102f531d530ad6deb92","text/plain":"<Figure size 720x720 with 1 Axes>"},"metadata":{"image/png":{"height":575,"width":572},"needs_background":"light"}},"19":{"data":{"image/png":"5d69d02ae26ed8f5a808f205f0695f5ef935cb38","text/plain":"<Figure size 720x720 with 1 Axes>"},"metadata":{"image/png":{"height":575,"width":572},"needs_background":"light"}},"2":{"data":{"image/png":"76308081e51a782eb3d55559e605385ef4d0fd75","text/plain":"<Figure size 720x720 with 1 Axes>"},"metadata":{"image/png":{"height":575,"width":572},"needs_background":"light"}},"20":{"data":{"image/png":"0dc724e8c1db7d474743da7831060cbd7f209857","text/plain":"<Figure size 720x720 with 1 Axes>"},"metadata":{"image/png":{"height":575,"width":572},"needs_background":"light"}},"3":{"data":{"image/png":"863d2daaaa38277a183b85f0cd91f0d6bbafe7ff","text/plain":"<Figure size 720x720 with 1 Axes>"},"metadata":{"image/png":{"height":575,"width":572},"needs_background":"light"}},"4":{"data":{"image/png":"f8d241c2030176a33dbba0e5112757efab1c17fa","text/plain":"<Figure size 720x720 with 1 Axes>"},"metadata":{"image/png":{"height":575,"width":572},"needs_background":"light"}},"5":{"data":{"image/png":"315317948776f5731121f89eb9e65ebaf2614a4c","text/plain":"<Figure size 720x720 with 1 Axes>"},"metadata":{"image/png":{"height":575,"width":572},"needs_background":"light"}},"6":{"data":{"image/png":"a01d5420a46b03199219e9692d2c5f742d832395","text/plain":"<Figure size 720x720 with 1 Axes>"},"metadata":{"image/png":{"height":575,"width":572},"needs_background":"light"}},"7":{"data":{"image/png":"513027a1b892cb859396ab10b18d69c806e83e48","text/plain":"<Figure size 720x720 with 1 Axes>"},"metadata":{"image/png":{"height":575,"width":572},"needs_background":"light"}},"8":{"data":{"image/png":"2f2cf948f5db4e396d1dc1685895b6b8e8a36e74","text/plain":"<Figure size 720x720 with 1 Axes>"},"metadata":{"image/png":{"height":575,"width":572},"needs_background":"light"}},"9":{"data":{"image/png":"48f672f4c9d4fde4bd3496f5e9e147546a76e359","text/plain":"<Figure size 720x720 with 1 Axes>"},"metadata":{"image/png":{"height":575,"width":572},"needs_background":"light"}}},"pos":20,"scrolled":true,"start":1658948531982,"state":"done","type":"cell"}
{"cell_type":"code","end":1658950497874,"exec_count":36,"id":"5cab12","input":"# Setup\ndepth_options = np.arange(2, 31, 4)\nall_train_scores = []\nall_test_scores = []\n\n# Predict all health outcomes again\nfor col in tqdm(y_cols):\n    # Set up variables\n    y = finalDataset[col]\n    X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42, test_size=0.2)\n\n    # Set up graph X and y\n    train_scores = []\n    test_scores = []\n\n    # Test all depths and record scores\n    for depth in depth_options:\n        forest = RandomForestRegressor(max_depth=depth, n_estimators=10, n_jobs=-1)\n        forest.fit(X_train, y_train)\n        train_scores.append(forest.score(X_train, y_train))\n        test_scores.append(forest.score(X_test, y_test))\n\n    # Normalize and record scores across depths\n    all_train_scores.append(normalize_list(train_scores))\n    all_test_scores.append(normalize_list(test_scores))\n\n# Plot Training\nfor scores in all_train_scores:\n    plt.plot(depth_options, scores, c=\"blue\", alpha=0.3)\n\n# Plot Testing\nfor scores in all_test_scores:\n    plt.plot(depth_options, scores, c=\"red\", alpha=0.3)\n\n# Formatting\nplt.title(\"Random Forest (10 trees) performance across max depth\")\nplt.xlabel(\"Max Depth\")\nplt.ylabel(\"Normalized R2\")\nplt.show()\n\n# Blue is training accuracy, red is testing accuracy","kernel":"python3","output":{"0":{"name":"stderr","text":"\r  0%|          | 0/21 [00:00<?, ?it/s]"},"1":{"name":"stderr","text":"\r  5%|▍         | 1/21 [00:59<19:55, 59.76s/it]"},"10":{"name":"stderr","text":"\r 48%|████▊     | 10/21 [09:22<10:04, 54.95s/it]"},"11":{"name":"stderr","text":"\r 52%|█████▏    | 11/21 [10:19<09:17, 55.76s/it]"},"12":{"name":"stderr","text":"\r 57%|█████▋    | 12/21 [11:13<08:15, 55.10s/it]"},"13":{"name":"stderr","text":"\r 62%|██████▏   | 13/21 [12:10<07:25, 55.63s/it]"},"14":{"name":"stderr","text":"\r 67%|██████▋   | 14/21 [13:04<06:25, 55.14s/it]"},"15":{"name":"stderr","text":"\r 71%|███████▏  | 15/21 [13:55<05:24, 54.02s/it]"},"16":{"name":"stderr","text":"\r 76%|███████▌  | 16/21 [14:46<04:24, 52.97s/it]"},"17":{"name":"stderr","text":"\r 81%|████████  | 17/21 [15:35<03:27, 51.93s/it]"},"18":{"name":"stderr","text":"\r 86%|████████▌ | 18/21 [16:25<02:33, 51.16s/it]"},"19":{"name":"stderr","text":"\r 90%|█████████ | 19/21 [17:13<01:40, 50.27s/it]"},"2":{"name":"stderr","text":"\r 10%|▉         | 2/21 [01:52<17:35, 55.54s/it]"},"20":{"name":"stderr","text":"\r 95%|█████████▌| 20/21 [18:03<00:50, 50.12s/it]"},"21":{"name":"stderr","text":"\r100%|██████████| 21/21 [18:59<00:00, 51.99s/it]"},"22":{"name":"stderr","text":"\r100%|██████████| 21/21 [18:59<00:00, 54.26s/it]"},"23":{"name":"stderr","text":"\n"},"24":{"data":{"image/png":"a59ee23ba1beed22a926ad09cc4e8d8fab2bffb4","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":277,"width":390},"needs_background":"light"}},"3":{"name":"stderr","text":"\r 14%|█▍        | 3/21 [02:45<16:21, 54.54s/it]"},"4":{"name":"stderr","text":"\r 19%|█▉        | 4/21 [03:45<15:59, 56.44s/it]"},"5":{"name":"stderr","text":"\r 24%|██▍       | 5/21 [04:45<15:26, 57.88s/it]"},"6":{"name":"stderr","text":"\r 29%|██▊       | 6/21 [05:44<14:35, 58.38s/it]"},"7":{"name":"stderr","text":"\r 33%|███▎      | 7/21 [06:41<13:27, 57.67s/it]"},"8":{"name":"stderr","text":"\r 38%|███▊      | 8/21 [07:35<12:18, 56.79s/it]"},"9":{"name":"stderr","text":"\r 43%|████▎     | 9/21 [08:28<11:05, 55.48s/it]"}},"pos":24,"start":1658949357933,"state":"done","type":"cell"}
{"cell_type":"code","end":1658959804706,"exec_count":91,"id":"ae4e93","input":"bins = np.linspace(0, 1, 100)\n\n# Choosing just a few because this takes much longer to run and we run out of compute and memory resources very quickly\nparams = ['stroke%', 'depression%', 'badMentalHealth%', 'badPhysicalHealth%']\nys = [finalDataset[param] for param in params]\n\nfor i, y in enumerate(ys):\n    X_train, X_test, y_train, y_test = train_test_split(X,y,random_state=42, test_size=0.2)\n\n    # Low tree count model so that everything runs in a reasonable time while maintaining accuracy close enough to optimal\n    untrained_model = RandomForestRegressor(max_depth=15, n_estimators=10)\n    model, score, scores = best_cross_model(untrained_model, X_train, y_train, X_test, y_test, 20)\n    score = model.score(X_test,y_test)\n\n    # Manage memory\n    del X_train,X_test,y_train,y_test,model,untrained_model\n    plt.hist(scores, bins=bins)\n    plt.title(f\"Cross-validation scores for {params[i]}\\nR2 score = {score}\")\n    plt.xlabel(\"R2 score\")\n    plt.ylabel(\"Frequency\")\n    plt.show()","kernel":"python3","output":{"0":{"data":{"image/png":"1fa14c5dee21cafd221b7e4853094a63f304387e","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":291,"width":382},"needs_background":"light"}},"1":{"data":{"image/png":"8ec03648756438b23296432d546b4ce7e0e34ecb","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":291,"width":382},"needs_background":"light"}},"2":{"data":{"image/png":"7753f5d8ef9ce757b405dbaf2100d7839a02688b","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":291,"width":392},"needs_background":"light"}},"3":{"data":{"image/png":"1554e9ea85d5704c75c4ef3ed28b5d27e8ed14b6","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":291,"width":382},"needs_background":"light"}}},"pos":27,"scrolled":true,"start":1658959252978,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":1,"id":"00787a","input":"# Basics\nimport pandas as pd\nimport numpy as np\n\n# Reduce anxiety while running code\nfrom tqdm import tqdm\n\n# Plotting\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Sklearn utilities\nimport sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_validate\n\n# Sklearn models\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.tree import plot_tree","kernel":"python3","pos":2,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":10,"id":"af18e4","input":"# Set graph size\nsns.set(rc = {'figure.figsize':(8,5)})\n\n# All Health Indicators against poverty and HS Graduation Status for Tract\nfor condition in ['arthritis%',\n       'highBP%','nonSkinCancer%', 'currentAsthma%', 'coronaryHeartDisease%',\n       'chronicObstructivePulmonaryDisease%', 'depression%', 'diabetes%', 'highCholestorol%', 'chronicKidneyDisease%',\n       'badMentalHealth%', 'obesity%', 'badPhysicalHealth%','stroke%', 'allTeethLost%']:\n    \n    # fit line through data to give an idea of general trend\n    lm = LinearRegression()\n    lm.fit(finalDataset[['poverty']],finalDataset[condition])\n    \n    # Linear Regression Line for idea of General Trend\n    plt.plot(finalDataset['poverty'], lm.predict(finalDataset[['poverty']]),c='SkyBlue',linewidth=6)\n    \n    # Scatter plot of Real Data\n    plt.scatter(finalDataset['poverty'],finalDataset[condition], c=finalDataset[\"%PercentHighSchoolGraduateOrHigher\"],cmap='plasma',s=4)\n    plt.xlabel(\"Poverty Rate of Tract\")\n    plt.ylabel(\"Percentage with \"+condition[:-1]+\" per Tract\")\n    plt.title(\"Percentage with \"+condition[:-1]+\" versus Poverty\")\n    plt.show()\n    \n    # Plot scale to give meaning to the gradient of. each point... The yellower the points are, the more percentage of the tract graduating High School\n    f = plt.figure()\n    f.set_figwidth(1)\n    f.set_figheight(5)\n    plt.scatter(np.zeros_like(finalDataset[\"%PercentHighSchoolGraduateOrHigher\"]),finalDataset[\"%PercentHighSchoolGraduateOrHigher\"],c=finalDataset[\"%PercentHighSchoolGraduateOrHigher\"],s=500,marker=\"s\",cmap='plasma')\n    plt.xticks([])\n    plt.title('Percent of HS Graduate or Higher Colour Scale', fontsize=15)\n    plt.show()\n    \n    # Plot residuals to help determine heteroskedacicity\n    plt.scatter(finalDataset['poverty'], finalDataset[condition]-lm.predict(finalDataset[['poverty']]),c=finalDataset[\"%PercentHighSchoolGraduateOrHigher\"],cmap='plasma',s=4)\n    plt.xlabel(\"Poverty Rate of Tract\")\n    plt.ylabel(f\"Percentage with {condition[:-1]} residual\")\n    plt.title(f\"Percentage with {condition[:-1]} linear residuals\")\n    plt.show()","kernel":"python3","output":{"0":{"data":{"image/png":"c3852a1e4a4dc28584856f8f045ff0a92a7c3151","text/plain":"<Figure size 576x360 with 1 Axes>"},"metadata":{"image/png":{"height":337,"width":500}}},"1":{"data":{"image/png":"88abd2462a42864c568d55936e4ab16d105ad82e","text/plain":"<Figure size 72x360 with 1 Axes>"},"metadata":{"image/png":{"height":303,"width":364}}},"10":{"data":{"image/png":"88abd2462a42864c568d55936e4ab16d105ad82e","text/plain":"<Figure size 72x360 with 1 Axes>"},"metadata":{"image/png":{"height":303,"width":364}}},"11":{"data":{"image/png":"d5767a313c340b380f276f9e4b9a8c07c8904cb4","text/plain":"<Figure size 576x360 with 1 Axes>"},"metadata":{"image/png":{"height":337,"width":502}}},"12":{"data":{"image/png":"e69e1bbd98b33b7abecf70b7b046754f501f3c8d","text/plain":"<Figure size 576x360 with 1 Axes>"},"metadata":{"image/png":{"height":337,"width":500}}},"13":{"data":{"image/png":"88abd2462a42864c568d55936e4ab16d105ad82e","text/plain":"<Figure size 72x360 with 1 Axes>"},"metadata":{"image/png":{"height":303,"width":364}}},"14":{"data":{"image/png":"79ee3d8bbd1b341c7783af94e5f3ff7ea21a9c72","text/plain":"<Figure size 576x360 with 1 Axes>"},"metadata":{"image/png":{"height":337,"width":509}}},"15":{"data":{"image/png":"636ad1e21a91924e952d15bac826b5632059a55c","text/plain":"<Figure size 576x360 with 1 Axes>"},"metadata":{"image/png":{"height":396,"width":500}}},"16":{"data":{"image/png":"88abd2462a42864c568d55936e4ab16d105ad82e","text/plain":"<Figure size 72x360 with 1 Axes>"},"metadata":{"image/png":{"height":303,"width":364}}},"17":{"data":{"image/png":"e0322aef0c81252708d7f2edfa83937f9961a525","text/plain":"<Figure size 576x360 with 1 Axes>"},"metadata":{"image/png":{"height":391,"width":509}}},"18":{"data":{"image/png":"0aa7df43bb3de1020fcdd40836ca40bcda8c7e56","text/plain":"<Figure size 576x360 with 1 Axes>"},"metadata":{"image/png":{"height":337,"width":500}}},"19":{"data":{"image/png":"88abd2462a42864c568d55936e4ab16d105ad82e","text/plain":"<Figure size 72x360 with 1 Axes>"},"metadata":{"image/png":{"height":303,"width":364}}},"2":{"data":{"image/png":"a7329fc8c4944c2e0cd9f50cf5e28914743d8725","text/plain":"<Figure size 576x360 with 1 Axes>"},"metadata":{"image/png":{"height":337,"width":509}}},"20":{"data":{"image/png":"9245b2a719064946d47f8b9ae54424eff9e94bd6","text/plain":"<Figure size 576x360 with 1 Axes>"},"metadata":{"image/png":{"height":337,"width":509}}},"21":{"data":{"image/png":"4be3a807c2c8a6797114d77189f697b5956fecd2","text/plain":"<Figure size 576x360 with 1 Axes>"},"metadata":{"image/png":{"height":337,"width":500}}},"22":{"data":{"image/png":"88abd2462a42864c568d55936e4ab16d105ad82e","text/plain":"<Figure size 72x360 with 1 Axes>"},"metadata":{"image/png":{"height":303,"width":364}}},"23":{"data":{"image/png":"ea1eb8381ed7aab789ca6939dafd663dfb705033","text/plain":"<Figure size 576x360 with 1 Axes>"},"metadata":{"image/png":{"height":337,"width":509}}},"24":{"data":{"image/png":"d6136923a45175debd35d152b45c47c8f90141b9","text/plain":"<Figure size 576x360 with 1 Axes>"},"metadata":{"image/png":{"height":337,"width":500}}},"25":{"data":{"image/png":"88abd2462a42864c568d55936e4ab16d105ad82e","text/plain":"<Figure size 72x360 with 1 Axes>"},"metadata":{"image/png":{"height":303,"width":364}}},"26":{"data":{"image/png":"63f44fa4c59a63c57eb52575ffb7f2ee1054a78a","text/plain":"<Figure size 576x360 with 1 Axes>"},"metadata":{"image/png":{"height":337,"width":509}}},"27":{"data":{"image/png":"269c5667844db52a3dbd6364382cfd762d9cb9f1","text/plain":"<Figure size 576x360 with 1 Axes>"},"metadata":{"image/png":{"height":337,"width":500}}},"28":{"data":{"image/png":"88abd2462a42864c568d55936e4ab16d105ad82e","text/plain":"<Figure size 72x360 with 1 Axes>"},"metadata":{"image/png":{"height":303,"width":364}}},"29":{"data":{"image/png":"e7a19bc87d157851191b3a9be8562aa9bbad2a71","text/plain":"<Figure size 576x360 with 1 Axes>"},"metadata":{"image/png":{"height":337,"width":502}}},"3":{"data":{"image/png":"70fc3a04077c6f884d4b67a5e711f24d7922bd0e","text/plain":"<Figure size 576x360 with 1 Axes>"},"metadata":{"image/png":{"height":337,"width":500}}},"30":{"data":{"image/png":"642b448e8b7b1f1f4b6bf9641844bc93879b1f2a","text/plain":"<Figure size 576x360 with 1 Axes>"},"metadata":{"image/png":{"height":337,"width":500}}},"31":{"data":{"image/png":"88abd2462a42864c568d55936e4ab16d105ad82e","text/plain":"<Figure size 72x360 with 1 Axes>"},"metadata":{"image/png":{"height":303,"width":364}}},"32":{"data":{"image/png":"1cc2e20dc7a82937cef87c302e01883cddcb1dcb","text/plain":"<Figure size 576x360 with 1 Axes>"},"metadata":{"image/png":{"height":337,"width":509}}},"33":{"data":{"image/png":"6e946ed89077032be5101f3a3f1f6d9c0bc28b6c","text/plain":"<Figure size 576x360 with 1 Axes>"},"metadata":{"image/png":{"height":337,"width":500}}},"34":{"data":{"image/png":"88abd2462a42864c568d55936e4ab16d105ad82e","text/plain":"<Figure size 72x360 with 1 Axes>"},"metadata":{"image/png":{"height":303,"width":364}}},"35":{"data":{"image/png":"621389751f7ac12acfd94bd0e20e057a2f52f32b","text/plain":"<Figure size 576x360 with 1 Axes>"},"metadata":{"image/png":{"height":337,"width":509}}},"36":{"data":{"image/png":"79b0a2f35a92ea3822f2a48149427f31841bab35","text/plain":"<Figure size 576x360 with 1 Axes>"},"metadata":{"image/png":{"height":337,"width":500}}},"37":{"data":{"image/png":"88abd2462a42864c568d55936e4ab16d105ad82e","text/plain":"<Figure size 72x360 with 1 Axes>"},"metadata":{"image/png":{"height":303,"width":364}}},"38":{"data":{"image/png":"86f2c1adc124efd555b0c5818be4062fb7129774","text/plain":"<Figure size 576x360 with 1 Axes>"},"metadata":{"image/png":{"height":337,"width":509}}},"39":{"data":{"image/png":"e7508c451417c526486b84158131d9d6ea3386fa","text/plain":"<Figure size 576x360 with 1 Axes>"},"metadata":{"image/png":{"height":337,"width":500}}},"4":{"data":{"image/png":"88abd2462a42864c568d55936e4ab16d105ad82e","text/plain":"<Figure size 72x360 with 1 Axes>"},"metadata":{"image/png":{"height":303,"width":364}}},"40":{"data":{"image/png":"88abd2462a42864c568d55936e4ab16d105ad82e","text/plain":"<Figure size 72x360 with 1 Axes>"},"metadata":{"image/png":{"height":303,"width":364}}},"41":{"data":{"image/png":"127c8645d7f645f25c96ce1e634772dd69c5e848","text/plain":"<Figure size 576x360 with 1 Axes>"},"metadata":{"image/png":{"height":337,"width":502}}},"42":{"data":{"image/png":"6e0dd76c1672987cf591c4017275bb1768b2a5cb","text/plain":"<Figure size 576x360 with 1 Axes>"},"metadata":{"image/png":{"height":337,"width":500}}},"43":{"data":{"image/png":"88abd2462a42864c568d55936e4ab16d105ad82e","text/plain":"<Figure size 72x360 with 1 Axes>"},"metadata":{"image/png":{"height":303,"width":364}}},"44":{"data":{"image/png":"c009cb791345c679966313d8d9fcbb129dd3be30","text/plain":"<Figure size 576x360 with 1 Axes>"},"metadata":{"image/png":{"height":337,"width":509}}},"5":{"data":{"image/png":"62b429d93192ec913c1903e38b851090c26c693f","text/plain":"<Figure size 576x360 with 1 Axes>"},"metadata":{"image/png":{"height":337,"width":509}}},"6":{"data":{"image/png":"4aac05ef7f0a84521a13dec6d98cd24d1e261acf","text/plain":"<Figure size 576x360 with 1 Axes>"},"metadata":{"image/png":{"height":337,"width":510}}},"7":{"data":{"image/png":"88abd2462a42864c568d55936e4ab16d105ad82e","text/plain":"<Figure size 72x360 with 1 Axes>"},"metadata":{"image/png":{"height":303,"width":364}}},"8":{"data":{"image/png":"4649b31dd670f886adcb8ca3bb2fc466f99efe83","text/plain":"<Figure size 576x360 with 1 Axes>"},"metadata":{"image/png":{"height":337,"width":512}}},"9":{"data":{"image/png":"bc51a314377987d947103097b7705e23e5b7d0a8","text/plain":"<Figure size 576x360 with 1 Axes>"},"metadata":{"image/png":{"height":337,"width":500}}}},"pos":17,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":11,"id":"71d458","input":"# Plot\nplt.hist(finalDataset[finalDataset[\"%PercentHighSchoolGraduateOrHigher\"]>=70][\"badPhysicalHealth%\"],bins=np.arange(0,50,1),label='>70% HS Graduates',color='Skyblue',density=True)\nplt.hist(finalDataset[finalDataset[\"%PercentHighSchoolGraduateOrHigher\"]<70][\"badPhysicalHealth%\"],bins=np.arange(0,50,1),label='<70% HS Graduates',color='Red', alpha=0.5,density=True)\n\n# Formatting\nplt.ylabel('# of Tracts (Normalized)',fontsize=13)\nplt.xlabel('% Bad Physical Health',fontsize=13)\nplt.title('Histogram of Physical Health based on HS Graduation Status\\n',fontsize=15)\nplt.legend(fontsize=13)\n\nplt.show()","kernel":"python3","output":{"0":{"data":{"image/png":"ac1bc91969cf38ac069309affaefc85a50cf0757","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":299,"width":472},"needs_background":"light"}}},"pos":15,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":12,"id":"973696","input":"def best_cross_model(model, X_train, y_train, X_test, y_test, k):\n    estimators = cross_validate(model, X_train, y_train, cv=k, return_estimator=True, n_jobs=-1)[\"estimator\"]\n    scores = [estimator.score(X_test, y_test) for estimator in estimators]\n    best_score = scores[0]\n    best_i = 0\n    for i, score in enumerate(scores[1:]):\n        if score > best_score:\n            best_i = i+1\n            best_score = score\n    return estimators[best_i], best_score, scores","kernel":"python3","pos":25,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":20,"id":"9e26ea","input":"# Setup\ndepth_options = np.arange(2, 30, 2)\nall_train_scores = []\nall_test_scores = []\n\n# Predict all health outcomes again\nfor col in tqdm(y_cols):\n    # Set up variables\n    y = finalDataset[col]\n    X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42, test_size=0.2)\n\n    # Set up graph X and y\n    train_scores = []\n    test_scores = []\n\n    # Test all depths and record scores\n    for depth in depth_options:\n        rfr = DecisionTreeRegressor(max_depth=depth)\n        rfr.fit(X_train, y_train)\n        train_scores.append(rfr.score(X_train, y_train))\n        test_scores.append(rfr.score(X_test, y_test))\n\n    # Normalize and record scores across depths\n    all_train_scores.append(normalize_list(train_scores))\n    all_test_scores.append(normalize_list(test_scores))\n\n# Plot Training\nfor scores in all_train_scores:\n    plt.plot(depth_options, scores, c=\"blue\", alpha=0.3)\n\n# Plot Testing\nfor scores in all_test_scores:\n    plt.plot(depth_options, scores, c=\"red\", alpha=0.3)\n\n# Formatting\nplt.title(\"Decision tree performance across max depth\")\nplt.xlabel(\"Max Depth\")\nplt.ylabel(\"Normalized R2\")\nplt.show()\n\n# Blue is training accuracy, red is testing accuracy","kernel":"python3","output":{"0":{"name":"stderr","text":"\r  0%|          | 0/21 [00:00<?, ?it/s]"},"1":{"name":"stderr","text":"\r  5%|▍         | 1/21 [00:25<08:33, 25.68s/it]"},"10":{"name":"stderr","text":"\r 48%|████▊     | 10/21 [04:26<04:50, 26.45s/it]"},"11":{"name":"stderr","text":"\r 52%|█████▏    | 11/21 [04:53<04:24, 26.47s/it]"},"12":{"name":"stderr","text":"\r 57%|█████▋    | 12/21 [05:20<04:00, 26.71s/it]"},"13":{"name":"stderr","text":"\r 62%|██████▏   | 13/21 [05:48<03:36, 27.02s/it]"},"14":{"name":"stderr","text":"\r 67%|██████▋   | 14/21 [06:12<03:02, 26.07s/it]"},"15":{"name":"stderr","text":"\r 71%|███████▏  | 15/21 [06:38<02:37, 26.28s/it]"},"16":{"name":"stderr","text":"\r 76%|███████▌  | 16/21 [07:03<02:09, 25.80s/it]"},"17":{"name":"stderr","text":"\r 81%|████████  | 17/21 [07:28<01:41, 25.44s/it]"},"18":{"name":"stderr","text":"\r 86%|████████▌ | 18/21 [07:56<01:18, 26.16s/it]"},"19":{"name":"stderr","text":"\r 90%|█████████ | 19/21 [08:24<00:53, 26.84s/it]"},"2":{"name":"stderr","text":"\r 10%|▉         | 2/21 [00:53<08:32, 26.96s/it]"},"20":{"name":"stderr","text":"\r 95%|█████████▌| 20/21 [08:51<00:27, 27.00s/it]"},"21":{"name":"stderr","text":"\r100%|██████████| 21/21 [09:16<00:00, 26.36s/it]"},"22":{"name":"stderr","text":"\r100%|██████████| 21/21 [09:16<00:00, 26.51s/it]"},"23":{"name":"stderr","text":"\n"},"24":{"data":{"image/png":"14c9a865fbabec5d785fd0bcaed47d292484e0b0","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":277,"width":385},"needs_background":"light"}},"3":{"name":"stderr","text":"\r 14%|█▍        | 3/21 [01:19<07:54, 26.39s/it]"},"4":{"name":"stderr","text":"\r 19%|█▉        | 4/21 [01:46<07:33, 26.66s/it]"},"5":{"name":"stderr","text":"\r 24%|██▍       | 5/21 [02:12<07:06, 26.65s/it]"},"6":{"name":"stderr","text":"\r 29%|██▊       | 6/21 [02:39<06:41, 26.75s/it]"},"7":{"name":"stderr","text":"\r 33%|███▎      | 7/21 [03:08<06:23, 27.41s/it]"},"8":{"name":"stderr","text":"\r 38%|███▊      | 8/21 [03:33<05:47, 26.74s/it]"},"9":{"name":"stderr","text":"\r 43%|████▎     | 9/21 [04:01<05:24, 27.03s/it]"}},"pos":23,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":3,"id":"146d29","input":"# Dropping redundant columns before beginning with the analysis\nfinalDataset.drop('state',axis=1)\nfinalDataset.drop('county',axis=1)\n\n# Check that the data looks ok\nfinalDataset.head()","kernel":"python3","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>stateInitials</th>\n      <th>stateName</th>\n      <th>countyName</th>\n      <th>countyID</th>\n      <th>tractID</th>\n      <th>population</th>\n      <th>noHealthInsurance%</th>\n      <th>arthritis%</th>\n      <th>bingeDrinking%</th>\n      <th>highBP%</th>\n      <th>...</th>\n      <th>%SomeCollege,NoDegree</th>\n      <th>%AssociatesDegree</th>\n      <th>%BachelorsDegree</th>\n      <th>%GraduateOrProfessionalDegree</th>\n      <th>%PercentHighSchoolGraduateOrHigher</th>\n      <th>%PercentBachelorsDegreeOrHigher</th>\n      <th>%PovertyLessThanHighSchoolGraduate</th>\n      <th>%PovertyHighSchoolGraduate</th>\n      <th>%PovertySomeCollegeOrAssociatesDegree</th>\n      <th>%PovertyBachelorsDegreeOrHigher</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>AZ</td>\n      <td>Arizona</td>\n      <td>Maricopa</td>\n      <td>4013</td>\n      <td>4013422643</td>\n      <td>5789</td>\n      <td>11.9</td>\n      <td>17.0</td>\n      <td>19.9</td>\n      <td>23.7</td>\n      <td>...</td>\n      <td>28.8</td>\n      <td>12.5</td>\n      <td>23.8</td>\n      <td>9.8</td>\n      <td>95.3</td>\n      <td>33.5</td>\n      <td>14.8</td>\n      <td>10.0</td>\n      <td>5.7</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CA</td>\n      <td>California</td>\n      <td>Sacramento</td>\n      <td>6067</td>\n      <td>6067007402</td>\n      <td>6180</td>\n      <td>15.4</td>\n      <td>24.6</td>\n      <td>19.6</td>\n      <td>30.5</td>\n      <td>...</td>\n      <td>24.7</td>\n      <td>7.8</td>\n      <td>9.9</td>\n      <td>3.2</td>\n      <td>82.9</td>\n      <td>13.1</td>\n      <td>45.0</td>\n      <td>23.5</td>\n      <td>13.3</td>\n      <td>6.9</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>AL</td>\n      <td>Alabama</td>\n      <td>Madison</td>\n      <td>1089</td>\n      <td>1089000201</td>\n      <td>760</td>\n      <td>25.4</td>\n      <td>36.0</td>\n      <td>10.5</td>\n      <td>53.7</td>\n      <td>...</td>\n      <td>27.3</td>\n      <td>6.0</td>\n      <td>7.8</td>\n      <td>2.5</td>\n      <td>74.3</td>\n      <td>10.3</td>\n      <td>45.8</td>\n      <td>20.4</td>\n      <td>26.4</td>\n      <td>22.6</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>AL</td>\n      <td>Alabama</td>\n      <td>Montgomery</td>\n      <td>1101</td>\n      <td>1101002202</td>\n      <td>1185</td>\n      <td>25.2</td>\n      <td>36.1</td>\n      <td>10.9</td>\n      <td>54.6</td>\n      <td>...</td>\n      <td>12.0</td>\n      <td>3.7</td>\n      <td>3.4</td>\n      <td>0.9</td>\n      <td>68.1</td>\n      <td>4.3</td>\n      <td>35.5</td>\n      <td>26.6</td>\n      <td>19.2</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>AL</td>\n      <td>Alabama</td>\n      <td>Butler</td>\n      <td>1013</td>\n      <td>1013952800</td>\n      <td>1394</td>\n      <td>14.3</td>\n      <td>36.0</td>\n      <td>13.4</td>\n      <td>43.0</td>\n      <td>...</td>\n      <td>17.3</td>\n      <td>10.3</td>\n      <td>20.3</td>\n      <td>13.8</td>\n      <td>91.2</td>\n      <td>34.1</td>\n      <td>19.8</td>\n      <td>21.7</td>\n      <td>10.2</td>\n      <td>10.5</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 84 columns</p>\n</div>","text/plain":"  stateInitials   stateName  countyName  countyID     tractID  population  \\\n0            AZ     Arizona    Maricopa      4013  4013422643        5789   \n1            CA  California  Sacramento      6067  6067007402        6180   \n2            AL     Alabama     Madison      1089  1089000201         760   \n3            AL     Alabama  Montgomery      1101  1101002202        1185   \n4            AL     Alabama      Butler      1013  1013952800        1394   \n\n   noHealthInsurance%  arthritis%  bingeDrinking%  highBP%  ...  \\\n0                11.9        17.0            19.9     23.7  ...   \n1                15.4        24.6            19.6     30.5  ...   \n2                25.4        36.0            10.5     53.7  ...   \n3                25.2        36.1            10.9     54.6  ...   \n4                14.3        36.0            13.4     43.0  ...   \n\n   %SomeCollege,NoDegree  %AssociatesDegree  %BachelorsDegree  \\\n0                   28.8               12.5              23.8   \n1                   24.7                7.8               9.9   \n2                   27.3                6.0               7.8   \n3                   12.0                3.7               3.4   \n4                   17.3               10.3              20.3   \n\n   %GraduateOrProfessionalDegree  %PercentHighSchoolGraduateOrHigher  \\\n0                            9.8                                95.3   \n1                            3.2                                82.9   \n2                            2.5                                74.3   \n3                            0.9                                68.1   \n4                           13.8                                91.2   \n\n   %PercentBachelorsDegreeOrHigher  %PovertyLessThanHighSchoolGraduate  \\\n0                             33.5                                14.8   \n1                             13.1                                45.0   \n2                             10.3                                45.8   \n3                              4.3                                35.5   \n4                             34.1                                19.8   \n\n   %PovertyHighSchoolGraduate  %PovertySomeCollegeOrAssociatesDegree  \\\n0                        10.0                                    5.7   \n1                        23.5                                   13.3   \n2                        20.4                                   26.4   \n3                        26.6                                   19.2   \n4                        21.7                                   10.2   \n\n   %PovertyBachelorsDegreeOrHigher  \n0                              2.0  \n1                              6.9  \n2                             22.6  \n3                              0.0  \n4                             10.5  \n\n[5 rows x 84 columns]"},"exec_count":3}},"pos":5,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":5,"id":"87ca30","input":"# Set graph size\nsns.set(rc = {'figure.figsize':(25,20)})\n\n# Generate and label heatmap with all columns except for the first 5 (state, county, and tract information)\nsns.heatmap(np.abs(finalDataset[finalDataset.columns[5:]].corr()), cmap=\"plasma\")\nplt.title(\"Health and Socioeconomic Data Heat Map\", fontsize=12)\nplt.show()","kernel":"python3","output":{"0":{"data":{"image/png":"dd7cdf7722449faeca73c5e3e212ced204bfa60a","text/plain":"<Figure size 1800x1440 with 2 Axes>"},"metadata":{"image/png":{"height":1376,"width":1540}}}},"pos":9,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":75,"id":"3ca199","input":"# Validating every decision tree at max performance\nbins = np.linspace(0, 1, 100)\nfor i, y in enumerate(y_all):\n    X_train,X_test,y_train,y_test = train_test_split(X,y,random_state=42, test_size=0.2)\n    model, score, scores = best_cross_model(DecisionTreeRegressor(max_depth=10), X_train, y_train, X_test, y_test, 20)\n    score = model.score(X_test,y_test)\n    plt.hist(scores, bins=bins)\n    plt.title(f\"Cross-validation scores for {y_cols[i]}\\nR2 score = {score}\")\n    plt.xlabel(\"R2 score\")\n    plt.ylabel(\"Frequency\")\n    plt.show()","kernel":"python3","output":{"0":{"data":{"image/png":"471a695cff133fb8478281ccd286483392b422c6","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":291,"width":382},"needs_background":"light"}},"1":{"data":{"image/png":"8d8c20f17ed313a50f58cd49b924b1773b2bf1cc","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":291,"width":382},"needs_background":"light"}},"10":{"data":{"image/png":"d55b59d1f63f6c724201b868ca4efa3aea1529a6","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":291,"width":392},"needs_background":"light"}},"11":{"data":{"image/png":"a19a850f3996ce13b58cb6e3e8d8d2d27e1c7236","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":291,"width":382},"needs_background":"light"}},"12":{"data":{"image/png":"f45553e1fd5b69ef536627371aa2a8f318feee03","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":291,"width":382},"needs_background":"light"}},"13":{"data":{"image/png":"12e73b5e2ad27c0aead3c2c1f515b94497a5f5d5","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":291,"width":392},"needs_background":"light"}},"14":{"data":{"image/png":"b14c8f10e1ec44520a07ef60c150bc0807b026a9","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":291,"width":382},"needs_background":"light"}},"15":{"data":{"image/png":"a97e70a304a99dd7dec001087fea6efdbae7d701","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":291,"width":382},"needs_background":"light"}},"16":{"data":{"image/png":"08c78fb9b335dbccfa1e848e8fa7c97b0383415c","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":291,"width":392},"needs_background":"light"}},"17":{"data":{"image/png":"ad974e59929a1730f1ca4574a5c82ea47672e82b","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":291,"width":382},"needs_background":"light"}},"18":{"data":{"image/png":"72fab1611647af3ae65120576194d9af810db1ce","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":291,"width":392},"needs_background":"light"}},"19":{"data":{"image/png":"e5a0817baf956d668b1582110ad70a46f824f1d8","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":291,"width":382},"needs_background":"light"}},"2":{"data":{"image/png":"4de4c7ba3c7da6058484e0937a171e9f54a2d4ba","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":291,"width":382},"needs_background":"light"}},"20":{"data":{"image/png":"253800ac2c304f14d46348e06d7174ac4dc2d49d","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":291,"width":392},"needs_background":"light"}},"3":{"data":{"image/png":"84cd66723ac1f1cd7c800694816e1e9cfb666a82","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":291,"width":376},"needs_background":"light"}},"4":{"data":{"image/png":"9f4ff153c5dd28bab5b0cbcd3db9cdeeb24985ee","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":291,"width":382},"needs_background":"light"}},"5":{"data":{"image/png":"fd98c9884a69d697be3fc739935a30204c67b0fb","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":291,"width":382},"needs_background":"light"}},"6":{"data":{"image/png":"803ac3b5f69e7f2eadc48a1a25f827d6d1698a33","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":291,"width":392},"needs_background":"light"}},"7":{"data":{"image/png":"d9f3c5439e87312d56b444e7176a93a50ef4efbd","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":291,"width":382},"needs_background":"light"}},"8":{"data":{"image/png":"fd15717ff1cb2319b0d1f0e8487be9ca6a8f3c30","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":291,"width":382},"needs_background":"light"}},"9":{"data":{"image/png":"e6f254618b80eed9d620533ace86535ef0dfc93b","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":291,"width":414},"needs_background":"light"}}},"pos":26,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":9,"id":"f750b3","input":"# Plot\nplt.hist(finalDataset[\"%PercentHighSchoolGraduateOrHigher\"])\n\n# Formatting\nplt.ylabel('# of Tracts',fontsize=13)\nplt.xlabel('% HS Graduate or Higher',fontsize=13)\nplt.title('Distribution of HS Graduation Status\\n',fontsize=15)\n\nplt.show()","kernel":"python3","output":{"0":{"data":{"image/png":"3fd6f45e0c79cac3e797247a61b9ee5697737e2b","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":299,"width":405},"needs_background":"light"}}},"pos":14,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"041449","input":"##### The first thing that stands out is the poorly fit line for the Asian plot. This looks like it's due to a combination of not enough datapoints and heteroskedastic data. Additionally, there appears to be only very small trends, which indicates that there isn't that strong of a correlation. It is notable, however, that there is a disturbing trend that an increase in % black is very linearly correlated with a decrease in physical health.\n\n##### We can also start looking at education data\n\n","pos":13,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"044a1d","input":"##### Imports\n\n","pos":1,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"21debc","input":"## OUTLIER ANALYSIS\n","pos":28,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"28ff38","input":"### CREATING COUNTY DATA","pos":29,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"37fb1a","input":"### Running Analysis on the Entire Dataset!!! \\(Education data, Socioeconomic Data, and Health Data\\)\n\n","pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"3b2518","input":"##### We will now also see what all columns we are working with...\n\n","pos":6,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"6ccb4f","input":"##### Before we start our analysis, we need to add region information for each tract, as it was one of the things we wanted to explore\n\n","pos":10,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"72fe22","input":"##### In order to see which factors are truly the most important, we will make a Decision Tree model, and set the depth small enough that the model is easily interpretable. This will allow us to evaluate models more clearly.\n\n","pos":19,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"81a715","input":"##### All the models have extremely tight distributions, which means that they are picking up on the same trend no matter how much data is left out. This means that the models are not only fitting to the data, but also have the appropriate level of complexity to match the complexity of the true distribution.\n\n","pos":27.5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"81b821","input":"##### The results are surprisingly good for aggregate measures like badMentalHealth% \\(R2 of 0.642\\) and badPhysicalHealth% \\(R2 of 0.633\\) but also quite bad for more specific measures like depression% \\(R2 of 0.259\\). Now that we know that the models tend not be racist\\(as our previous exploration showed that race shouldn't correlate very much\\), we can see how far we can push the trees before they overfit.\n\n","pos":20.5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"81c9de","input":"##### Generate a heat map to look at the linear relationships in our data\n\n","pos":8,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"871d48","input":"##### First, we can look at trends across regions\n\n","pos":12.5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"8f935b","input":"###### Taking the graphs one at a time:\n\n- Arthritis doesn't seem to have much of a correlation outside of a weak positive correlation with poverty \n- High Blood Pressure with poverty rates and HS graduation rates seems to have a similar distribution of data to poverty, which is that there is not a ton of correlation\n- Non Skin Cancer rates don't seem to be that affected by high school diploma attainment, but interestingly occur less frequently  when more people are below the poverty line. One potential explanation for this could be that poorer areas can't afford to be seen by a doctor, and thus the cancer goes undiagnosed and untreated. \n- There appears to be a positive correlation between asthma rates and poverty percentage, which may be attributed to the fact that dirtier living conditions have been proven to cause asthma.\n- There appears to be a slight positive correlation between coronary heart disease and poverty.     \n- \\-\\-\\- SO FAR, A COMMON THEME IS THAT COMMUNITIES WITH LOW HIGH SCHOOL GRADUATION RATES AND HIGH POVERTY RATES HAVE WORSE OUTCOMES THAN THE OTHER TRACTS\n- There appears to be a notable positive trend between poverty rate and Chronic Obstructive Pulmonary Disease\n- There doesn't seem to be much of a correlation between poverty and high school completion, and Depression\n- It seems that those with a high school education are less likely to get diabetes, but as poverty increases, the clusters of having a lot of high school graduates and not are differentiated quite noticeably\n- There seems to be no correlation between High Cholesterol and poverty or high school graduation status \n- There seems to be two major clusters of data, ones with high levels of high school educations and low levels. The higher levels of HS educations seem to lower the chance of chronic kidney disease.\n- It seems that there is a very strong, homoskedastic relationship between poverty and the percentage of mental health issues.\n- There seems to be a notably strong relationship between obesity and poverty.\n- Akin to the diabetes correlation, having more people high school educated mitigates the effect of poverty  on bad physical health percentage\n- There is a moderately strong correlation between poverty and stroke percentage, but tracts with more people with high school educations seem to have a lot less prevalence of stroke\n- There is a very strong correlation between poverty and the percentage of the population that lost all of their teeth\n\n","pos":18,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"944a2e","input":"##### Although the curve seems to fit pretty well, the residuals show that this relationship is actually extremely heteroskedastic. This means we need to find some way to determine with variables are actually good without needing to look at alot of graphs again.\n\n","pos":18.75,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"9b661a","input":"###### It is important to see the data first to get a sense of the values before beginning with model creation and fitting.\n\n","pos":4,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"acc1a0","input":"##### We can also test out a pair of variables that we intuitively assumed would have a good correlation and make sure that there is no heteroskedasticity.\n\n","pos":18.25,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"bf336f","input":"##### It looks like most tracts have high HS graduation rates, but those that have low graduation rates appear to have nearly double the rate of bad physical health.\n\n##### Next, we can examine specific health indicators, such as diabetes percentage, arthritis percentage, depression, and more.\n\n","pos":16,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"c0bf00","input":"##### It appears to be that the regions have about the same distributions of physical health, but the south seems to be shifted right slightly and with a noticeable increase in standard deviation. Overall, the difference is relatively small.\n\n##### Next, we can explore the correlation between race and health.\n\n","pos":12.875,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"c10330","input":"##### There is a very clear peak in testing accuracy in all the models that occurs around a max depth of 10. As the model increases in complexity past that point, the testing accuracy has a steep dropoff while the training accuracy continues to increase.\n\n##### Since the tree model still shows significant room to grow at its peak, we can try using random forests to fight overfitting.\n\n","pos":23.5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"c7600b","input":"##### Here, we can see a completely different trend, where testing accuracy seems to hold constant as the max depth is increased. The peak performance for this model is noticeably shifted to a point of higher complexity without showing signs of significant overfitting.\n\n##### Now that we know how far we can push each model, we can validate that they haven't been getting lucky train\\-test splits and that they are indeed generalizing a trend with cross\\-validation.\n\n","pos":24.5,"state":"done","type":"cell"}
{"end":1658888232825,"exec_count":37,"id":"c498ae","input":"lowInc = lowInc.sort_values('badPhysicalHealth%',axis=0)\nlowInc[['income','badMentalHealth%','badPhysicalHealth%','obesity%','%PercentHighSchoolGraduateOrHigher','routineCheckUp%','badPhysicalHealth%','currentSmoking%']].head(10)","kernel":"python3","output":{"0":{"ename":"KeyError","evalue":"\"['currentSmoking%'] not in index\"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_7620/3594356158.py\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mlowInc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlowInc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msort_values\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'badPhysicalHealth%'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mlowInc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'income'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'badMentalHealth%'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'badPhysicalHealth%'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'obesity%'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'%PercentHighSchoolGraduateOrHigher'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'routineCheckUp%'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'badPhysicalHealth%'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'currentSmoking%'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3509\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_iterator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3510\u001b[0m                 \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3511\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_indexer_strict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"columns\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3512\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3513\u001b[0m         \u001b[0;31m# take() does not accept boolean indexers\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36m_get_indexer_strict\u001b[0;34m(self, key, axis_name)\u001b[0m\n\u001b[1;32m   5780\u001b[0m             \u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_indexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reindex_non_unique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5781\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5782\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_raise_if_missing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5783\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5784\u001b[0m         \u001b[0mkeyarr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtake\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36m_raise_if_missing\u001b[0;34m(self, key, indexer, axis_name)\u001b[0m\n\u001b[1;32m   5843\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5844\u001b[0m             \u001b[0mnot_found\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mensure_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmissing_mask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnonzero\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5845\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{not_found} not in index\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5846\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5847\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0moverload\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: \"['currentSmoking%'] not in index\""]}},"pos":33,"start":1658888232798,"state":"done","type":"cell"}
{"end":1658946056376,"exec_count":23,"id":"2c1f04","input":"plt.scatter(finalDataset['income'],finalDataset['badPhysicalHealth%'])\nplt.xlabel('Income')\nplt.ylabel('Bad Physical Health Percentage')\nplt.title('Bad Physical Health(Aggregated) vs Income')\n\nX = np.array(finalDataset['income'])\ny = finalDataset['badPhysicalHealth%']\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2)\npm = np.polyfit(X_train, y_train, 4)\n\nx_linspace = np.linspace(min(X_train), max(X_train), 100)\ny_linspace = [np.polyval(pm, x) for x in x_linspace]\nplt.plot(x_linspace, y_linspace, color=\"red\", linewidth=5)\nplt.show()\n\ny_pred = np.array([np.polyval(pm, x) for x in X])\nplt.scatter(X, np.array(y)-y_pred)\nplt.title(\"Bad Physical Health(Aggregated) vs Income RESIDUALS\")\nplt.xlabel(\"Income\")\nplt.ylabel(\"Bad Health Percentage Residual\")\nplt.show()","kernel":"python3","output":{"0":{"data":{"image/png":"f995519b801b55a5056b711f1235e5238a984e25","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":277,"width":386},"needs_background":"light"}},"1":{"data":{"image/png":"3967b7433f14e53294c4690ed8dc8fc8f5f11878","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":277,"width":395},"needs_background":"light"}}},"pos":18.5,"start":1658946052852,"state":"done","type":"cell"}
{"end":1658949149779,"exec_count":31,"id":"3396e6","input":"# Returns list where all values are scaled to be in [0, 1]\ndef normalize_list(l):\n    l = np.array(l)\n    l = l - min(l)\n    l = l / max(l)\n    return l","kernel":"python3","pos":21.75,"start":1658949149760,"state":"done","type":"cell"}
{"end":1658953417346,"exec_count":72,"id":"7ba2b5","input":"regions = finalDataset[\"regionInitials\"].unique()\nfor region in regions:\n    plt.hist(finalDataset[finalDataset[\"regionInitials\"] == region][\"badPhysicalHealth%\"], density=True, bins=np.linspace(0, 35, 30), label=region)\n    plt.hist(finalDataset[\"badPhysicalHealth%\"], density=True, bins=np.linspace(0, 35, 30), label=\"All\", histtype=\"step\", linewidth=2)\n    plt.title(f\"Normalized Physical Health Distribution in {region}\", fontsize=14)\n    plt.xlabel(\"% Bad Physical Health\", fontsize=12)\n    plt.ylabel(\"Count\", fontsize=12)\n    plt.legend()\n    plt.ylim(0, 0.15)\n    plt.show()","kernel":"python3","output":{"0":{"data":{"image/png":"30edbd15578fffd44336eae315740f256b59ad84","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":281,"width":394},"needs_background":"light"}},"1":{"data":{"image/png":"dc6958adf501c46e149a6fc5eeec7851aee76e04","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":281,"width":394},"needs_background":"light"}},"2":{"data":{"image/png":"d00ad2d9fd18060f2311054d5b4ddd5c00eea738","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":281,"width":394},"needs_background":"light"}},"3":{"data":{"image/png":"0a9d79fef803720052bad7b17209200cb89db99b","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":281,"width":394},"needs_background":"light"}}},"pos":12.75,"start":1658953415528,"state":"done","type":"cell"}
{"end":1658954143305,"exec_count":86,"id":"d9a037","input":"for race in [\"white\", \"black\", \"asian\", \"hispanic\"]:\n    X = np.array(finalDataset[race])\n    y = np.array(finalDataset[\"badPhysicalHealth%\"])\n\n    plt.scatter(X, y)\n    plt.xlabel(f'% {race}', fontsize=12)\n    plt.ylabel('Bad Physical Health Percentage', fontsize=12)\n    plt.title(f'% {race} vs Bad Physical Health', fontsize=14)\n    \n    lm = sklearn.linear_model.LinearRegression()\n    lm.fit(np.reshape(X, (-1, 1)), np.array(y))\n    x_pred = np.linspace(0, 100, 100)\n    y_pred = lm.predict(np.reshape(x_pred, (-1, 1)))\n    \n    plt.plot(x_pred, y_pred, color=\"red\", linewidth=5)\n    plt.ylim(0, 40)\n    plt.show()","kernel":"python3","output":{"0":{"data":{"image/png":"963293071b8f67da58d0c8c7a61d7c0d6ca91344","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":281,"width":385},"needs_background":"light"}},"1":{"data":{"image/png":"513d1fbb034585de9755fceed45ce75b81d9845e","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":281,"width":385},"needs_background":"light"}},"2":{"data":{"image/png":"b270902639983b301167c5f39cf9a753d8f532bc","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":281,"width":385},"needs_background":"light"}},"3":{"data":{"image/png":"db3ae07dd1725fb6efb4c219df1c3a94146f0410","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":281,"width":385},"needs_background":"light"}}},"pos":12.9375,"start":1658954140811,"state":"done","type":"cell"}
{"end":1658959247514,"exec_count":90,"id":"44fd21","input":"# Set up common inputs for the models to choose from\nX_cols = ['noHealthInsurance%', 'men', 'women', 'hispanic', 'white', 'black', 'native',\n       'asian', 'pacific','incomePerCap', 'poverty', 'childPoverty',\n       'professional', 'service', 'office', 'construction', 'production',\n       'drive', 'carpool', 'transit', 'walk', 'otherTransp', 'workAtHome',\n       'meanCommute', 'employed', 'privateWork', 'publicWork', 'selfEmployed',\n       'familyWork', 'unemployment', '%LessThan9thGrade',\n       '%HighSchoolGraduate', '%SomeCollege,NoDegree', '%AssociatesDegree',\n       '%BachelorsDegree', '%GraduateOrProfessionalDegree',\n       '%PercentHighSchoolGraduateOrHigher', '%PercentBachelorsDegreeOrHigher',\n       '%PovertyLessThanHighSchoolGraduate', '%PovertyHighSchoolGraduate',\n       '%PovertySomeCollegeOrAssociatesDegree',\n       '%PovertyBachelorsDegreeOrHigher']\ny_cols = ['stroke%', 'depression%',\n          'highBP%', 'nonSkinCancer%', 'currentAsthma%',\n          'arthritis%', 'cervicalCancer%', 'coronaryHeartDisease%',\n          'chronicObstructivePulmonaryDisease%',\n          'diabetes%',\n          'highCholestorol%', 'chronicKidneyDisease%',\n          'obesity%', 'allTeethLost%',\n          'badMentalHealth%', 'badPhysicalHealth%']\n\nX = finalDataset[X_cols]\ny_all = [finalDataset[col] for col in y_cols]","kernel":"python3","pos":19.5,"start":1658959247509,"state":"done","type":"cell"}
{"exec_count":17,"id":"feca70","input":"medInc = medInc.sort_values('badPhysicalHealth%',axis=0)\nmedInc[['income','badMentalHealth%','badPhysicalHealth%','obesity%','%PercentHighSchoolGraduateOrHigher','routineCheckUp%','menUpToDateOnVaccinesAndScreenings%']].head(10)\n","kernel":"python3","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>income</th>\n      <th>badMentalHealth%</th>\n      <th>badPhysicalHealth%</th>\n      <th>obesity%</th>\n      <th>%PercentHighSchoolGraduateOrHigher</th>\n      <th>routineCheckUp%</th>\n    </tr>\n    <tr>\n      <th>countyName</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Hand</th>\n      <td>50428.29</td>\n      <td>9.94</td>\n      <td>10.67</td>\n      <td>31.92</td>\n      <td>92.43</td>\n      <td>77.48</td>\n    </tr>\n    <tr>\n      <th>Stanley</th>\n      <td>63233.00</td>\n      <td>10.10</td>\n      <td>9.30</td>\n      <td>31.40</td>\n      <td>93.10</td>\n      <td>75.20</td>\n    </tr>\n    <tr>\n      <th>Griggs</th>\n      <td>50272.00</td>\n      <td>10.20</td>\n      <td>13.00</td>\n      <td>36.90</td>\n      <td>89.80</td>\n      <td>75.50</td>\n    </tr>\n    <tr>\n      <th>Edmunds</th>\n      <td>63799.77</td>\n      <td>10.24</td>\n      <td>10.69</td>\n      <td>34.00</td>\n      <td>90.80</td>\n      <td>76.61</td>\n    </tr>\n    <tr>\n      <th>Aurora</th>\n      <td>57257.00</td>\n      <td>10.30</td>\n      <td>10.60</td>\n      <td>32.10</td>\n      <td>87.60</td>\n      <td>76.80</td>\n    </tr>\n    <tr>\n      <th>Dickey</th>\n      <td>59453.72</td>\n      <td>10.34</td>\n      <td>10.87</td>\n      <td>33.29</td>\n      <td>88.85</td>\n      <td>73.73</td>\n    </tr>\n    <tr>\n      <th>Cavalier</th>\n      <td>66298.85</td>\n      <td>10.35</td>\n      <td>12.29</td>\n      <td>35.27</td>\n      <td>91.96</td>\n      <td>74.66</td>\n    </tr>\n    <tr>\n      <th>Foster</th>\n      <td>59500.00</td>\n      <td>10.40</td>\n      <td>11.60</td>\n      <td>35.20</td>\n      <td>88.80</td>\n      <td>73.80</td>\n    </tr>\n    <tr>\n      <th>Kingsbury</th>\n      <td>58743.19</td>\n      <td>10.42</td>\n      <td>10.90</td>\n      <td>30.81</td>\n      <td>90.66</td>\n      <td>76.68</td>\n    </tr>\n    <tr>\n      <th>Sargent</th>\n      <td>61473.82</td>\n      <td>10.46</td>\n      <td>11.18</td>\n      <td>36.27</td>\n      <td>92.31</td>\n      <td>72.86</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"              income  badMentalHealth%  badPhysicalHealth%  obesity%  \\\ncountyName                                                             \nHand        50428.29              9.94               10.67     31.92   \nStanley     63233.00             10.10                9.30     31.40   \nGriggs      50272.00             10.20               13.00     36.90   \nEdmunds     63799.77             10.24               10.69     34.00   \nAurora      57257.00             10.30               10.60     32.10   \nDickey      59453.72             10.34               10.87     33.29   \nCavalier    66298.85             10.35               12.29     35.27   \nFoster      59500.00             10.40               11.60     35.20   \nKingsbury   58743.19             10.42               10.90     30.81   \nSargent     61473.82             10.46               11.18     36.27   \n\n            %PercentHighSchoolGraduateOrHigher  routineCheckUp%  \ncountyName                                                       \nHand                                     92.43            77.48  \nStanley                                  93.10            75.20  \nGriggs                                   89.80            75.50  \nEdmunds                                  90.80            76.61  \nAurora                                   87.60            76.80  \nDickey                                   88.85            73.73  \nCavalier                                 91.96            74.66  \nFoster                                   88.80            73.80  \nKingsbury                                90.66            76.68  \nSargent                                  92.31            72.86  "},"exec_count":17}},"pos":34,"state":"done","type":"cell"}
{"exec_count":24,"id":"7908d5","input":"highInc = highInc.sort_values('badPhysicalHealth%',axis=0)\nhighInc[['income','badMentalHealth%','badPhysicalHealth%','obesity%','%PercentHighSchoolGraduateOrHigher','routineCheckUp%','menUpToDateOnVaccinesAndScreenings%']].head(30)","kernel":"python3","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>income</th>\n      <th>badMentalHealth%</th>\n      <th>badPhysicalHealth%</th>\n      <th>obesity%</th>\n      <th>%PercentHighSchoolGraduateOrHigher</th>\n      <th>routineCheckUp%</th>\n    </tr>\n    <tr>\n      <th>countyName</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Arlington</th>\n      <td>122354.33</td>\n      <td>10.96</td>\n      <td>7.49</td>\n      <td>23.08</td>\n      <td>93.75</td>\n      <td>74.55</td>\n    </tr>\n    <tr>\n      <th>Falls Church</th>\n      <td>114829.47</td>\n      <td>9.86</td>\n      <td>7.72</td>\n      <td>27.99</td>\n      <td>98.17</td>\n      <td>79.51</td>\n    </tr>\n    <tr>\n      <th>Loudoun</th>\n      <td>133430.48</td>\n      <td>11.13</td>\n      <td>8.31</td>\n      <td>27.10</td>\n      <td>93.24</td>\n      <td>78.14</td>\n    </tr>\n    <tr>\n      <th>Fairfax</th>\n      <td>125977.55</td>\n      <td>10.70</td>\n      <td>8.76</td>\n      <td>24.59</td>\n      <td>91.84</td>\n      <td>76.17</td>\n    </tr>\n    <tr>\n      <th>Los Alamos</th>\n      <td>109186.53</td>\n      <td>10.67</td>\n      <td>9.02</td>\n      <td>24.96</td>\n      <td>97.98</td>\n      <td>71.07</td>\n    </tr>\n    <tr>\n      <th>Santa Clara</th>\n      <td>112941.62</td>\n      <td>10.72</td>\n      <td>9.07</td>\n      <td>21.29</td>\n      <td>87.13</td>\n      <td>71.53</td>\n    </tr>\n    <tr>\n      <th>Alexandria</th>\n      <td>100660.66</td>\n      <td>12.43</td>\n      <td>9.20</td>\n      <td>28.43</td>\n      <td>90.65</td>\n      <td>76.11</td>\n    </tr>\n    <tr>\n      <th>Fairfax City</th>\n      <td>103074.51</td>\n      <td>11.17</td>\n      <td>9.23</td>\n      <td>26.70</td>\n      <td>92.14</td>\n      <td>78.28</td>\n    </tr>\n    <tr>\n      <th>San Mateo</th>\n      <td>112753.75</td>\n      <td>10.75</td>\n      <td>9.54</td>\n      <td>20.75</td>\n      <td>88.41</td>\n      <td>71.59</td>\n    </tr>\n    <tr>\n      <th>Stafford</th>\n      <td>104149.69</td>\n      <td>13.20</td>\n      <td>10.07</td>\n      <td>33.03</td>\n      <td>93.57</td>\n      <td>78.54</td>\n    </tr>\n    <tr>\n      <th>Prince William</th>\n      <td>105553.82</td>\n      <td>13.22</td>\n      <td>10.22</td>\n      <td>30.04</td>\n      <td>88.70</td>\n      <td>77.19</td>\n    </tr>\n    <tr>\n      <th>Marin</th>\n      <td>110642.49</td>\n      <td>10.66</td>\n      <td>10.30</td>\n      <td>22.71</td>\n      <td>93.08</td>\n      <td>72.57</td>\n    </tr>\n    <tr>\n      <th>Calvert</th>\n      <td>104395.46</td>\n      <td>13.24</td>\n      <td>10.54</td>\n      <td>37.21</td>\n      <td>93.88</td>\n      <td>76.25</td>\n    </tr>\n    <tr>\n      <th>Nassau</th>\n      <td>108128.07</td>\n      <td>12.03</td>\n      <td>10.68</td>\n      <td>26.77</td>\n      <td>90.83</td>\n      <td>80.28</td>\n    </tr>\n    <tr>\n      <th>Westchester</th>\n      <td>102174.59</td>\n      <td>12.13</td>\n      <td>11.16</td>\n      <td>26.14</td>\n      <td>87.21</td>\n      <td>80.15</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"                   income  badMentalHealth%  badPhysicalHealth%  obesity%  \\\ncountyName                                                                  \nArlington       122354.33             10.96                7.49     23.08   \nFalls Church    114829.47              9.86                7.72     27.99   \nLoudoun         133430.48             11.13                8.31     27.10   \nFairfax         125977.55             10.70                8.76     24.59   \nLos Alamos      109186.53             10.67                9.02     24.96   \nSanta Clara     112941.62             10.72                9.07     21.29   \nAlexandria      100660.66             12.43                9.20     28.43   \nFairfax City    103074.51             11.17                9.23     26.70   \nSan Mateo       112753.75             10.75                9.54     20.75   \nStafford        104149.69             13.20               10.07     33.03   \nPrince William  105553.82             13.22               10.22     30.04   \nMarin           110642.49             10.66               10.30     22.71   \nCalvert         104395.46             13.24               10.54     37.21   \nNassau          108128.07             12.03               10.68     26.77   \nWestchester     102174.59             12.13               11.16     26.14   \n\n                %PercentHighSchoolGraduateOrHigher  routineCheckUp%  \ncountyName                                                           \nArlington                                    93.75            74.55  \nFalls Church                                 98.17            79.51  \nLoudoun                                      93.24            78.14  \nFairfax                                      91.84            76.17  \nLos Alamos                                   97.98            71.07  \nSanta Clara                                  87.13            71.53  \nAlexandria                                   90.65            76.11  \nFairfax City                                 92.14            78.28  \nSan Mateo                                    88.41            71.59  \nStafford                                     93.57            78.54  \nPrince William                               88.70            77.19  \nMarin                                        93.08            72.57  \nCalvert                                      93.88            76.25  \nNassau                                       90.83            80.28  \nWestchester                                  87.21            80.15  "},"exec_count":24}},"pos":35,"state":"done","type":"cell"}
{"exec_count":36,"id":"2a405f","input":"lowInc[['income','badMentalHealth%','badPhysicalHealth%','obesity%','%PercentHighSchoolGraduateOrHigher','routineCheckUp%','currentSmoking%']].tail(10)","kernel":"python3","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>income</th>\n      <th>badMentalHealth%</th>\n      <th>badPhysicalHealth%</th>\n      <th>obesity%</th>\n      <th>%PercentHighSchoolGraduateOrHigher</th>\n      <th>routineCheckUp%</th>\n      <th>menUpToDateOnVaccinesAndScreenings%</th>\n    </tr>\n    <tr>\n      <th>countyName</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Knott</th>\n      <td>31261.95</td>\n      <td>21.31</td>\n      <td>22.24</td>\n      <td>38.54</td>\n      <td>73.77</td>\n      <td>81.28</td>\n      <td>30.94</td>\n    </tr>\n    <tr>\n      <th>Apache</th>\n      <td>32392.22</td>\n      <td>22.85</td>\n      <td>22.53</td>\n      <td>36.81</td>\n      <td>78.17</td>\n      <td>71.92</td>\n      <td>17.94</td>\n    </tr>\n    <tr>\n      <th>Leslie</th>\n      <td>28593.79</td>\n      <td>21.93</td>\n      <td>22.68</td>\n      <td>41.48</td>\n      <td>68.41</td>\n      <td>80.90</td>\n      <td>33.45</td>\n    </tr>\n    <tr>\n      <th>Tensas</th>\n      <td>23447.45</td>\n      <td>21.43</td>\n      <td>22.72</td>\n      <td>45.52</td>\n      <td>76.10</td>\n      <td>83.37</td>\n      <td>19.44</td>\n    </tr>\n    <tr>\n      <th>Mingo</th>\n      <td>30715.92</td>\n      <td>23.75</td>\n      <td>22.84</td>\n      <td>48.43</td>\n      <td>74.33</td>\n      <td>78.70</td>\n      <td>40.02</td>\n    </tr>\n    <tr>\n      <th>Clinch</th>\n      <td>22300.07</td>\n      <td>23.57</td>\n      <td>23.14</td>\n      <td>41.18</td>\n      <td>73.28</td>\n      <td>76.04</td>\n      <td>22.71</td>\n    </tr>\n    <tr>\n      <th>Kenedy</th>\n      <td>24800.00</td>\n      <td>18.80</td>\n      <td>23.30</td>\n      <td>43.60</td>\n      <td>41.30</td>\n      <td>70.50</td>\n      <td>16.00</td>\n    </tr>\n    <tr>\n      <th>Wolfe</th>\n      <td>23990.00</td>\n      <td>21.91</td>\n      <td>23.39</td>\n      <td>45.21</td>\n      <td>69.24</td>\n      <td>80.38</td>\n      <td>31.46</td>\n    </tr>\n    <tr>\n      <th>Presidio</th>\n      <td>28607.31</td>\n      <td>17.45</td>\n      <td>23.63</td>\n      <td>45.17</td>\n      <td>52.95</td>\n      <td>73.04</td>\n      <td>16.86</td>\n    </tr>\n    <tr>\n      <th>Kusilvak</th>\n      <td>36468.00</td>\n      <td>26.60</td>\n      <td>24.70</td>\n      <td>43.50</td>\n      <td>78.20</td>\n      <td>63.70</td>\n      <td>14.60</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"              income  badMentalHealth%  badPhysicalHealth%  obesity%  \\\ncountyName                                                             \nKnott       31261.95             21.31               22.24     38.54   \nApache      32392.22             22.85               22.53     36.81   \nLeslie      28593.79             21.93               22.68     41.48   \nTensas      23447.45             21.43               22.72     45.52   \nMingo       30715.92             23.75               22.84     48.43   \nClinch      22300.07             23.57               23.14     41.18   \nKenedy      24800.00             18.80               23.30     43.60   \nWolfe       23990.00             21.91               23.39     45.21   \nPresidio    28607.31             17.45               23.63     45.17   \nKusilvak    36468.00             26.60               24.70     43.50   \n\n            %PercentHighSchoolGraduateOrHigher  routineCheckUp%  \\\ncountyName                                                        \nKnott                                    73.77            81.28   \nApache                                   78.17            71.92   \nLeslie                                   68.41            80.90   \nTensas                                   76.10            83.37   \nMingo                                    74.33            78.70   \nClinch                                   73.28            76.04   \nKenedy                                   41.30            70.50   \nWolfe                                    69.24            80.38   \nPresidio                                 52.95            73.04   \nKusilvak                                 78.20            63.70   \n\n            menUpToDateOnVaccinesAndScreenings%  \ncountyName                                       \nKnott                                     30.94  \nApache                                    17.94  \nLeslie                                    33.45  \nTensas                                    19.44  \nMingo                                     40.02  \nClinch                                    22.71  \nKenedy                                    16.00  \nWolfe                                     31.46  \nPresidio                                  16.86  \nKusilvak                                  14.60  "},"exec_count":36}},"pos":33.5,"state":"done","type":"cell"}
{"id":"18b304","input":"","pos":36,"state":"done","type":"cell"}
{"id":0,"time":1658933112805,"type":"user"}
{"last_load":1658870087726,"type":"file"}