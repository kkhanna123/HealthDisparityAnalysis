{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-ee749581-f40c-4c34-8bfa-107a4a5ef613.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"31845a","input":"","pos":46,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"350aeb","input":"","pos":42,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"3b5a36","input":"","pos":21,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"4966b8","input":"","pos":32,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"6e8d73","input":"","pos":60,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"6eed2b","input":"","pos":48,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"8c34d2","input":"","pos":47,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":1,"id":"8c0cea","input":"plt.scatter(noEducationDF['income'],noEducationDF['badPhysicalHealth%'])\nplt.xlabel('Income')\nplt.ylabel('Bad Physical Health Percentage')\nplt.title('Bad Physical Health(Aggregated) vs Income', fontsize=15)\nX = np.array(noEducationDF['income'])\ny = noEducationDF['badPhysicalHealth%']\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2)\npm = np.polyfit(X_train, y_train, 4)\nprint(r2_score(X_test, y_test))\nx_linspace = np.linspace(min(X_train), max(X_train), 100)\ny_linspace = [np.polyval(pm, x) for x in x_linspace]\nplt.plot(x_linspace, y_linspace, color=\"red\", linewidth=5)\nplt.show()\n\ny_pred = np.array([np.polyval(pm, x) for x in X])\nplt.scatter(X, np.array(y)-y_pred)\nplt.title(\"Bad Physical Health(Aggregated) vs Income RESIDUALS\")\nplt.xlabel(\"Income\")\nplt.ylabel(\"Bad Health Percentage Residual\")\nplt.show()","output":{"0":{"ename":"NameError","evalue":"name 'plt' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_6004/1750613694.py\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnoEducationDF\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'income'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mnoEducationDF\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'badPhysicalHealth%'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Income'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Bad Physical Health Percentage'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Bad Physical Health(Aggregated) vs Income'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfontsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m15\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnoEducationDF\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'income'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'plt' is not defined"]}},"pos":43,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":10,"id":"aadbbf","input":"#adding full region names for completness\ndef initial_to_region(initials):\n    regions = []\n    in_to_reg_dict = {\"NE\":\"Northeast\", \"S\": \"South\", \"W\": \"West\", \"MW\": \"Midwest\"}\n    for initial in initials:\n        regions.append(in_to_reg_dict[initial])\n    return regions\nnoEducationDF[\"regions\"] = initial_to_region(noEducationDF.regionInitials)","pos":15,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":11,"id":"d56f08","input":"noEducationDF[['normalizedBadPhysicalHealth', 'normalizedBadMentalHealth']] = noEducationDF[['badPhysicalHealth%', 'badMentalHealth%']].apply(lambda x: (x - x.min()) / (x.max() - x.min()))\n","pos":16,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":12,"id":"db2f06","input":"np.array(noEducationDF['normalizedIncome']) * 10","output":{"0":{"data":{"text/plain":"array([3.27296, 1.93428, 0.93288, ..., 2.45624, 1.65924, 1.30588])"},"exec_count":12,"output_type":"execute_result"}},"pos":17,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":13,"id":"502e21","input":"def make_ceil(arr):\n    ceil_arr = []\n    for element in arr:\n        ceil_arr.append(math.ceil(element))\n    return ceil_arr\n#classified_income = make_ceil(np.array(noEducationDF['normalizedIncome']) * 5)\n#noEducationDF['classifiedIncome'] = classified_income\nclassified_income_per_cap = make_ceil(np.array(noEducationDF['normalizedIncomePerCap']) * 5)\nnoEducationDF['classifiedIncomePerCap'] = classified_income_per_cap","pos":18,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":14,"id":"6d30ff","input":"\ndef plot_health_by_region():\n    i = 0\n    colors = ['Red', 'Blue', 'Green', 'Orange']\n    for reg in noEducationDF[\"regionInitials\"].unique():\n        region = initial_to_region([reg])[0]\n        \n        region_df = regions.get_group(reg)\n        \n        #Physical Health        \n        mean = round(region_df['normalizedBadPhysicalHealth'].mean(),3)\n        sd = round(st.stdev(region_df['normalizedBadPhysicalHealth'],3))\n        region_df.pivot(columns = 'classifiedIncomePerCap', values = 'diabetes%').plot.hist(bins=50)\n        plt.suptitle(\"Distribution of bad physical health in the \" + region)\n        plt.title(\"Mean: \" + str(mean) + \", Standard Deviation: \" + str(sd), fontdict = {'fontsize': 10})\n        plt.xlabel(\"normalizedPhysicalHealth%\")\n        plt.ylabel(\"Count\")\n        plt.show()\n        \n#         Mental Health\n        mean = round(region_df['normalizedBadMentalHealth'].mean(),3)\n        sd = round(st.stdev(region_df['normalizedBadMentalHealth'],3))\n        region_df.pivot(columns = 'classifiedIncomePerCap', values = 'obesity%').plot.hist(bins = 50)\n        plt.suptitle(\"Distribution of bad mental health in the \" + region)\n        plt.title(\"Mean: \" + str(mean) + \", Standard Deviation: \" + str(sd), fontdict = {'fontsize': 10})\n        plt.xlabel(\"normalizedBadMentalHealth%\")\n        plt.ylabel(\"Count\")\n        plt.show()\n        i+=1\nplot_health_by_region()","output":{"0":{"data":{"image/png":"d20192c2a96663eeb9e5dfd7645a42f18a6dd8a0","text/plain":"<Figure size 720x288 with 1 Axes>"},"exec_count":14,"metadata":{"image/png":{"height":290,"width":618},"needs_background":"light"},"output_type":"execute_result"},"1":{"data":{"image/png":"02a1bfff34f515b3f8460c90c4174834fecd85f3","text/plain":"<Figure size 720x288 with 1 Axes>"},"exec_count":14,"metadata":{"image/png":{"height":290,"width":612},"needs_background":"light"},"output_type":"execute_result"},"2":{"data":{"image/png":"af6ea6f762a68fd5feac805fbe09f58a069478e2","text/plain":"<Figure size 720x288 with 1 Axes>"},"exec_count":14,"metadata":{"image/png":{"height":290,"width":618},"needs_background":"light"},"output_type":"execute_result"},"3":{"data":{"image/png":"960a88921be21e38f1198d53973e20cabd6f5a7a","text/plain":"<Figure size 720x288 with 1 Axes>"},"exec_count":14,"metadata":{"image/png":{"height":290,"width":621},"needs_background":"light"},"output_type":"execute_result"},"4":{"data":{"image/png":"e6d2a6a8308dd94c2b7bc277533223be5d5588bf","text/plain":"<Figure size 720x288 with 1 Axes>"},"exec_count":14,"metadata":{"image/png":{"height":290,"width":618},"needs_background":"light"},"output_type":"execute_result"},"5":{"data":{"image/png":"f047eb0e104c452eac26cb30146a61413cf5addb","text/plain":"<Figure size 720x288 with 1 Axes>"},"exec_count":14,"metadata":{"image/png":{"height":290,"width":612},"needs_background":"light"},"output_type":"execute_result"},"6":{"data":{"image/png":"36fb0bdd5c5ea4e477bc40b83780facdc3285d98","text/plain":"<Figure size 720x288 with 1 Axes>"},"exec_count":14,"metadata":{"image/png":{"height":290,"width":618},"needs_background":"light"},"output_type":"execute_result"},"7":{"data":{"image/png":"43a7bb23eca0b6af99261d22114c198c99e514b0","text/plain":"<Figure size 720x288 with 1 Axes>"},"exec_count":14,"metadata":{"image/png":{"height":290,"width":621},"needs_background":"light"},"output_type":"execute_result"}},"pos":19,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":15,"id":"a8be67","input":"\ndef plot_condition_by_region():\n    i = 0\n    colors = ['Red', 'Blue', 'Green', 'Orange']\n    for reg in noEducationDF[\"regionInitials\"].unique():\n        region = initial_to_region([reg])[0]\n        \n        region_df = regions.get_group(reg)\n        #Setting a variable here so we only have to change one line to look at different conditions\n        region_yval = region_df[]\n        \n        #Physical Health        \n        mean = round(region_df['normalizedBadPhysicalHealth'].mean(),3)\n        sd = round(st.stdev(region_df['normalizedBadPhysicalHealth'],3))\n        region_df.pivot(columns = 'classifiedIncomePerCap', values = 'diabetes%').plot.hist(bins=50)\n        plt.suptitle(\"Distribution of bad physical health in the \" + region)\n        plt.title(\"Mean: \" + str(mean) + \", Standard Deviation: \" + str(sd), fontdict = {'fontsize': 10})\n        plt.xlabel(\"normalizedPhysicalHealth%\")\n        plt.ylabel(\"Count\")\n        plt.show()\n        \n        Mental Health\n        mean = round(region_df['normalizedBadMentalHealth'].mean(),3)\n        sd = round(st.stdev(region_df['normalizedBadMentalHealth'],3))\n        region_df.pivot(columns = 'classifiedIncomePerCap', values = 'obesity%').plot.hist(bins = 50)\n        plt.suptitle(\"Distribution of bad mental health in the \" + region)\n        plt.title(\"Mean: \" + str(mean) + \", Standard Deviation: \" + str(sd), fontdict = {'fontsize': 10})\n        plt.xlabel(\"normalizedBadMentalHealth%\")\n        plt.ylabel(\"Count\")\n        plt.show()\n        i+=1\nplot_health_by_region()","output":{"0":{"ename":"SyntaxError","evalue":"invalid syntax (4152034970.py, line 9)","output_type":"error","traceback":["\u001b[0;36m  File \u001b[0;32m\"/tmp/ipykernel_22304/4152034970.py\"\u001b[0;36m, line \u001b[0;32m9\u001b[0m\n\u001b[0;31m    region_yval = region_df[]\u001b[0m\n\u001b[0m                            ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}},"pos":20,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":16,"id":"77c26d","input":"#We can first look at income averages across regions\ndef plot_income_by_region():\n    i = 0\n    colors = ['Red', 'Blue', 'Green', 'Orange']\n    for reg in noEducationDF[\"regionInitials\"].unique():\n        region = initial_to_region([reg])[0]\n        region_df = regions.get_group(reg)\n        mean = round(region_df.normalizedIncome.mean(),3)\n        sd = round(st.stdev(region_df.normalizedIncome),3)\n        plt.hist(region_df.normalizedIncome,bins=50, color = colors[i])\n        plt.suptitle(\"Distribution of income in the \" + region, color = 'white')\n        plt.title(\"Mean: \" + str(mean) + \", Standard Deviation: \" + str(sd), fontdict = {'fontsize': 10}, color = 'white')\n        plt.show()\n        i+=1\n\nplot_income_by_region()","output":{"0":{"data":{"image/png":"02dd53dff7a0f237293756fedf202dcef23580eb","text/plain":"<Figure size 720x288 with 1 Axes>"},"exec_count":16,"metadata":{"image/png":{"height":277,"width":605},"needs_background":"light"},"output_type":"execute_result"},"1":{"data":{"image/png":"6bb03382816de560b9b2529ef238afd84622dfc7","text/plain":"<Figure size 720x288 with 1 Axes>"},"exec_count":16,"metadata":{"image/png":{"height":277,"width":605},"needs_background":"light"},"output_type":"execute_result"},"2":{"data":{"image/png":"1082d292f19084e1725322181f33232956eaec82","text/plain":"<Figure size 720x288 with 1 Axes>"},"exec_count":16,"metadata":{"image/png":{"height":277,"width":598},"needs_background":"light"},"output_type":"execute_result"},"3":{"data":{"image/png":"f18b16051e59902a7bd27fe0a92afe06f4b20863","text/plain":"<Figure size 720x288 with 1 Axes>"},"exec_count":16,"metadata":{"image/png":{"height":277,"width":607},"needs_background":"light"},"output_type":"execute_result"}},"pos":22,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":17,"id":"501fb9","input":"#plt.scatter(noEducationDF.normalizedIncome, noEducationDF[\"badPhysicalHealth%\"])\n#plt.show()\n#plt.scatter(noEducationDF.normalizedIncome, noEducationDF[\"badMentalHealth%\"])\n#plt.show()\n\nnoEducationDF[noEducationDF.normalizedIncomePerCap < 0.10].sort_values(by=['normalizedBadPhysicalHealth'])['employed'].head()\n","output":{"0":{"data":{"text/plain":"25733     337\n48520    2556\n62229    1206\n61635    1237\n43115     786\nName: employed, dtype: int64"},"exec_count":17,"output_type":"execute_result"}},"pos":23,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":18,"id":"994004","input":"def weighted_average(distribution, weights):\n    numerator = sum(distribution[i]*weights[i] for i in range(len(distribution)))\n    denominator = sum(weights)\n    \n    return round(numerator/denominator, 2)","pos":25,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":19,"id":"de6ec1","input":"pd.DataFrame(noEducationDF.groupby(['countyName']))","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Abbeville</td>\n      <td>Unnamed: 0 stateInitials       stateNam...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Acadia</td>\n      <td>Unnamed: 0 stateInitials  stateName cou...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Accomack</td>\n      <td>Unnamed: 0 stateInitials stateName coun...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Ada</td>\n      <td>Unnamed: 0 stateInitials stateName coun...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Adair</td>\n      <td>Unnamed: 0 stateInitials stateName coun...</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1824</th>\n      <td>Yukon-Koyukuk</td>\n      <td>Unnamed: 0 stateInitials stateName     c...</td>\n    </tr>\n    <tr>\n      <th>1825</th>\n      <td>Yuma</td>\n      <td>Unnamed: 0 stateInitials stateName coun...</td>\n    </tr>\n    <tr>\n      <th>1826</th>\n      <td>Zapata</td>\n      <td>Unnamed: 0 stateInitials stateName coun...</td>\n    </tr>\n    <tr>\n      <th>1827</th>\n      <td>Zavala</td>\n      <td>Unnamed: 0 stateInitials stateName coun...</td>\n    </tr>\n    <tr>\n      <th>1828</th>\n      <td>Ziebach</td>\n      <td>Unnamed: 0 stateInitials     stateName ...</td>\n    </tr>\n  </tbody>\n</table>\n<p>1829 rows × 2 columns</p>\n</div>","text/plain":"                  0                                                  1\n0         Abbeville         Unnamed: 0 stateInitials       stateNam...\n1            Acadia         Unnamed: 0 stateInitials  stateName cou...\n2          Accomack         Unnamed: 0 stateInitials stateName coun...\n3               Ada         Unnamed: 0 stateInitials stateName coun...\n4             Adair         Unnamed: 0 stateInitials stateName coun...\n...             ...                                                ...\n1824  Yukon-Koyukuk        Unnamed: 0 stateInitials stateName     c...\n1825           Yuma         Unnamed: 0 stateInitials stateName coun...\n1826         Zapata         Unnamed: 0 stateInitials stateName coun...\n1827         Zavala         Unnamed: 0 stateInitials stateName coun...\n1828        Ziebach         Unnamed: 0 stateInitials     stateName ...\n\n[1829 rows x 2 columns]"},"exec_count":19,"output_type":"execute_result"}},"pos":26,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":2,"id":"ef34d6","input":"import pandas as pd\nimport sklearn\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport statistics as st\nfrom sklearn import preprocessing\nimport math\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score","pos":1,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":20,"id":"f14de4","input":"county_info = noEducationDF.groupby(['countyName'])\ncounty_df = pd.DataFrame([])\ni = 0\ncounty_df['population'] = county_info['population'].apply(sum)\n\nfor col in  ['arthritis%',\n       'highBP%', 'nonSkinCancer%', 'currentAsthma%', 'coronaryHeartDisease%',\n       'chronicObstructivePulmonaryDisease%', 'depression%', 'diabetes%', 'highCholestorol%', 'chronicKidneyDisease%',\n       'badMentalHealth%', 'obesity%', 'badPhysicalHealth%',\n       'stroke%','noHealthInsurance%', 'men', 'women', 'hispanic', 'white', 'black', 'native',\n       'asian', 'pacific', 'votingAgeCitizen', 'income', 'incomeErr',\n       'incomePerCap', 'incomePerCapErr', 'poverty', 'childPoverty',\n       'professional', 'service', 'office', 'construction', 'production',\n       'drive', 'carpool', 'transit', 'walk', 'otherTransp', 'workAtHome',\n       'meanCommute', 'employed', 'privateWork', 'publicWork', 'selfEmployed',\n       'familyWork', 'unemployment']:\n    temp_col=[]\n    for county in county_df.index:\n        df = county_info.get_group(county)\n        temp_col.append(weighted_average(np.array(df[col]),np.array(df.population)))\n    county_df.insert(i,col, temp_col)\n    string = 'normalized' + col[0].upper() + col[1:]\n    county_df[string] = [(x - np.min(temp_col))/(np.max(temp_col)-np.min(temp_col)) for x in temp_col]\n    i+=2\n\ncounty_df['regionInitials'] = county_info['regionInitials'].first()\ncounty_df","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>arthritis%</th>\n      <th>population</th>\n      <th>highBP%</th>\n      <th>normalizedArthritis%</th>\n      <th>nonSkinCancer%</th>\n      <th>normalizedHighBP%</th>\n      <th>currentAsthma%</th>\n      <th>normalizedNonSkinCancer%</th>\n      <th>coronaryHeartDisease%</th>\n      <th>normalizedCurrentAsthma%</th>\n      <th>...</th>\n      <th>publicWork</th>\n      <th>normalizedPrivateWork</th>\n      <th>selfEmployed</th>\n      <th>normalizedPublicWork</th>\n      <th>familyWork</th>\n      <th>normalizedSelfEmployed</th>\n      <th>unemployment</th>\n      <th>normalizedFamilyWork</th>\n      <th>normalizedUnemployment</th>\n      <th>regionInitials</th>\n    </tr>\n    <tr>\n      <th>countyName</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Abbeville</th>\n      <td>31.82</td>\n      <td>25417</td>\n      <td>43.21</td>\n      <td>0.624130</td>\n      <td>7.62</td>\n      <td>0.693048</td>\n      <td>10.36</td>\n      <td>0.508523</td>\n      <td>8.39</td>\n      <td>0.385042</td>\n      <td>...</td>\n      <td>13.40</td>\n      <td>0.836418</td>\n      <td>7.62</td>\n      <td>0.134732</td>\n      <td>0.16</td>\n      <td>0.200526</td>\n      <td>9.47</td>\n      <td>0.025316</td>\n      <td>0.326777</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>Acadia</th>\n      <td>29.38</td>\n      <td>61773</td>\n      <td>40.52</td>\n      <td>0.529776</td>\n      <td>6.95</td>\n      <td>0.612098</td>\n      <td>10.38</td>\n      <td>0.413352</td>\n      <td>8.04</td>\n      <td>0.387812</td>\n      <td>...</td>\n      <td>12.32</td>\n      <td>0.859462</td>\n      <td>7.29</td>\n      <td>0.116611</td>\n      <td>0.25</td>\n      <td>0.191842</td>\n      <td>9.06</td>\n      <td>0.039557</td>\n      <td>0.312629</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>Accomack</th>\n      <td>32.44</td>\n      <td>33159</td>\n      <td>43.36</td>\n      <td>0.648105</td>\n      <td>7.95</td>\n      <td>0.697562</td>\n      <td>10.52</td>\n      <td>0.555398</td>\n      <td>8.47</td>\n      <td>0.407202</td>\n      <td>...</td>\n      <td>17.84</td>\n      <td>0.765363</td>\n      <td>7.23</td>\n      <td>0.209228</td>\n      <td>0.20</td>\n      <td>0.190263</td>\n      <td>5.16</td>\n      <td>0.031646</td>\n      <td>0.178054</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>Ada</th>\n      <td>21.27</td>\n      <td>392365</td>\n      <td>27.11</td>\n      <td>0.216164</td>\n      <td>6.27</td>\n      <td>0.208546</td>\n      <td>9.27</td>\n      <td>0.316761</td>\n      <td>4.71</td>\n      <td>0.234072</td>\n      <td>...</td>\n      <td>14.98</td>\n      <td>0.827339</td>\n      <td>6.62</td>\n      <td>0.161242</td>\n      <td>0.10</td>\n      <td>0.174211</td>\n      <td>4.40</td>\n      <td>0.015823</td>\n      <td>0.151829</td>\n      <td>W</td>\n    </tr>\n    <tr>\n      <th>Adair</th>\n      <td>30.90</td>\n      <td>72041</td>\n      <td>38.30</td>\n      <td>0.588554</td>\n      <td>7.47</td>\n      <td>0.545290</td>\n      <td>10.98</td>\n      <td>0.487216</td>\n      <td>8.64</td>\n      <td>0.470914</td>\n      <td>...</td>\n      <td>19.01</td>\n      <td>0.732716</td>\n      <td>7.80</td>\n      <td>0.228859</td>\n      <td>0.30</td>\n      <td>0.205263</td>\n      <td>5.41</td>\n      <td>0.047468</td>\n      <td>0.186680</td>\n      <td>MW</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>Yukon-Koyukuk</th>\n      <td>27.82</td>\n      <td>5588</td>\n      <td>37.08</td>\n      <td>0.469451</td>\n      <td>6.76</td>\n      <td>0.508577</td>\n      <td>12.05</td>\n      <td>0.386364</td>\n      <td>9.05</td>\n      <td>0.619114</td>\n      <td>...</td>\n      <td>57.55</td>\n      <td>0.119588</td>\n      <td>4.72</td>\n      <td>0.875503</td>\n      <td>0.00</td>\n      <td>0.124211</td>\n      <td>19.74</td>\n      <td>0.000000</td>\n      <td>0.681159</td>\n      <td>W</td>\n    </tr>\n    <tr>\n      <th>Yuma</th>\n      <td>23.08</td>\n      <td>205292</td>\n      <td>33.53</td>\n      <td>0.286156</td>\n      <td>6.52</td>\n      <td>0.401745</td>\n      <td>10.21</td>\n      <td>0.352273</td>\n      <td>6.86</td>\n      <td>0.364266</td>\n      <td>...</td>\n      <td>20.40</td>\n      <td>0.755761</td>\n      <td>5.21</td>\n      <td>0.252181</td>\n      <td>0.19</td>\n      <td>0.137105</td>\n      <td>10.32</td>\n      <td>0.030063</td>\n      <td>0.356108</td>\n      <td>W</td>\n    </tr>\n    <tr>\n      <th>Zapata</th>\n      <td>20.63</td>\n      <td>14018</td>\n      <td>34.54</td>\n      <td>0.191415</td>\n      <td>4.74</td>\n      <td>0.432140</td>\n      <td>8.86</td>\n      <td>0.099432</td>\n      <td>7.16</td>\n      <td>0.177285</td>\n      <td>...</td>\n      <td>20.76</td>\n      <td>0.617318</td>\n      <td>12.60</td>\n      <td>0.258221</td>\n      <td>0.38</td>\n      <td>0.331579</td>\n      <td>12.31</td>\n      <td>0.060127</td>\n      <td>0.424776</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>Zavala</th>\n      <td>23.00</td>\n      <td>11677</td>\n      <td>38.16</td>\n      <td>0.283063</td>\n      <td>5.08</td>\n      <td>0.541077</td>\n      <td>8.90</td>\n      <td>0.147727</td>\n      <td>8.48</td>\n      <td>0.182825</td>\n      <td>...</td>\n      <td>19.97</td>\n      <td>0.764141</td>\n      <td>5.30</td>\n      <td>0.244966</td>\n      <td>0.10</td>\n      <td>0.139474</td>\n      <td>11.10</td>\n      <td>0.015823</td>\n      <td>0.383023</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>Ziebach</th>\n      <td>25.10</td>\n      <td>2801</td>\n      <td>32.30</td>\n      <td>0.364269</td>\n      <td>5.70</td>\n      <td>0.364731</td>\n      <td>12.40</td>\n      <td>0.235795</td>\n      <td>8.70</td>\n      <td>0.667590</td>\n      <td>...</td>\n      <td>48.20</td>\n      <td>0.020775</td>\n      <td>18.40</td>\n      <td>0.718624</td>\n      <td>1.30</td>\n      <td>0.484211</td>\n      <td>27.00</td>\n      <td>0.205696</td>\n      <td>0.931677</td>\n      <td>MW</td>\n    </tr>\n  </tbody>\n</table>\n<p>1829 rows × 98 columns</p>\n</div>","text/plain":"               arthritis%  population  highBP%  normalizedArthritis%  \\\ncountyName                                                             \nAbbeville           31.82       25417    43.21              0.624130   \nAcadia              29.38       61773    40.52              0.529776   \nAccomack            32.44       33159    43.36              0.648105   \nAda                 21.27      392365    27.11              0.216164   \nAdair               30.90       72041    38.30              0.588554   \n...                   ...         ...      ...                   ...   \nYukon-Koyukuk       27.82        5588    37.08              0.469451   \nYuma                23.08      205292    33.53              0.286156   \nZapata              20.63       14018    34.54              0.191415   \nZavala              23.00       11677    38.16              0.283063   \nZiebach             25.10        2801    32.30              0.364269   \n\n               nonSkinCancer%  normalizedHighBP%  currentAsthma%  \\\ncountyName                                                         \nAbbeville                7.62           0.693048           10.36   \nAcadia                   6.95           0.612098           10.38   \nAccomack                 7.95           0.697562           10.52   \nAda                      6.27           0.208546            9.27   \nAdair                    7.47           0.545290           10.98   \n...                       ...                ...             ...   \nYukon-Koyukuk            6.76           0.508577           12.05   \nYuma                     6.52           0.401745           10.21   \nZapata                   4.74           0.432140            8.86   \nZavala                   5.08           0.541077            8.90   \nZiebach                  5.70           0.364731           12.40   \n\n               normalizedNonSkinCancer%  coronaryHeartDisease%  \\\ncountyName                                                       \nAbbeville                      0.508523                   8.39   \nAcadia                         0.413352                   8.04   \nAccomack                       0.555398                   8.47   \nAda                            0.316761                   4.71   \nAdair                          0.487216                   8.64   \n...                                 ...                    ...   \nYukon-Koyukuk                  0.386364                   9.05   \nYuma                           0.352273                   6.86   \nZapata                         0.099432                   7.16   \nZavala                         0.147727                   8.48   \nZiebach                        0.235795                   8.70   \n\n               normalizedCurrentAsthma%  ...  publicWork  \\\ncountyName                               ...               \nAbbeville                      0.385042  ...       13.40   \nAcadia                         0.387812  ...       12.32   \nAccomack                       0.407202  ...       17.84   \nAda                            0.234072  ...       14.98   \nAdair                          0.470914  ...       19.01   \n...                                 ...  ...         ...   \nYukon-Koyukuk                  0.619114  ...       57.55   \nYuma                           0.364266  ...       20.40   \nZapata                         0.177285  ...       20.76   \nZavala                         0.182825  ...       19.97   \nZiebach                        0.667590  ...       48.20   \n\n               normalizedPrivateWork  selfEmployed  normalizedPublicWork  \\\ncountyName                                                                 \nAbbeville                   0.836418          7.62              0.134732   \nAcadia                      0.859462          7.29              0.116611   \nAccomack                    0.765363          7.23              0.209228   \nAda                         0.827339          6.62              0.161242   \nAdair                       0.732716          7.80              0.228859   \n...                              ...           ...                   ...   \nYukon-Koyukuk               0.119588          4.72              0.875503   \nYuma                        0.755761          5.21              0.252181   \nZapata                      0.617318         12.60              0.258221   \nZavala                      0.764141          5.30              0.244966   \nZiebach                     0.020775         18.40              0.718624   \n\n               familyWork  normalizedSelfEmployed  unemployment  \\\ncountyName                                                        \nAbbeville            0.16                0.200526          9.47   \nAcadia               0.25                0.191842          9.06   \nAccomack             0.20                0.190263          5.16   \nAda                  0.10                0.174211          4.40   \nAdair                0.30                0.205263          5.41   \n...                   ...                     ...           ...   \nYukon-Koyukuk        0.00                0.124211         19.74   \nYuma                 0.19                0.137105         10.32   \nZapata               0.38                0.331579         12.31   \nZavala               0.10                0.139474         11.10   \nZiebach              1.30                0.484211         27.00   \n\n               normalizedFamilyWork  normalizedUnemployment  regionInitials  \ncountyName                                                                   \nAbbeville                  0.025316                0.326777               S  \nAcadia                     0.039557                0.312629               S  \nAccomack                   0.031646                0.178054               S  \nAda                        0.015823                0.151829               W  \nAdair                      0.047468                0.186680              MW  \n...                             ...                     ...             ...  \nYukon-Koyukuk              0.000000                0.681159               W  \nYuma                       0.030063                0.356108               W  \nZapata                     0.060127                0.424776               S  \nZavala                     0.015823                0.383023               S  \nZiebach                    0.205696                0.931677              MW  \n\n[1829 rows x 98 columns]"},"exec_count":20,"output_type":"execute_result"}},"pos":27,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":21,"id":"bf9b58","input":"county_df.info()","output":{"0":{"name":"stdout","output_type":"stream","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 1829 entries, Abbeville to Ziebach\nData columns (total 98 columns):\n #   Column                                         Non-Null Count  Dtype  \n---  ------                                         --------------  -----  \n 0   arthritis%                                     1829 non-null   float64\n 1   population                                     1829 non-null   int64  \n 2   highBP%                                        1829 non-null   float64\n 3   normalizedArthritis%                           1829 non-null   float64\n 4   nonSkinCancer%                                 1829 non-null   float64\n 5   normalizedHighBP%                              1829 non-null   float64\n 6   currentAsthma%                                 1829 non-null   float64\n 7   normalizedNonSkinCancer%                       1829 non-null   float64\n 8   coronaryHeartDisease%                          1829 non-null   float64\n 9   normalizedCurrentAsthma%                       1829 non-null   float64\n 10  chronicObstructivePulmonaryDisease%            1829 non-null   float64\n 11  normalizedCoronaryHeartDisease%                1829 non-null   float64\n 12  depression%                                    1829 non-null   float64\n 13  normalizedChronicObstructivePulmonaryDisease%  1829 non-null   float64\n 14  diabetes%                                      1829 non-null   float64\n 15  normalizedDepression%                          1829 non-null   float64\n 16  highCholestorol%                               1829 non-null   float64\n 17  normalizedDiabetes%                            1829 non-null   float64\n 18  chronicKidneyDisease%                          1829 non-null   float64\n 19  normalizedHighCholestorol%                     1829 non-null   float64\n 20  badMentalHealth%                               1829 non-null   float64\n 21  normalizedChronicKidneyDisease%                1829 non-null   float64\n 22  obesity%                                       1829 non-null   float64\n 23  normalizedBadMentalHealth%                     1829 non-null   float64\n 24  badPhysicalHealth%                             1829 non-null   float64\n 25  normalizedObesity%                             1829 non-null   float64\n 26  stroke%                                        1829 non-null   float64\n 27  normalizedBadPhysicalHealth%                   1829 non-null   float64\n 28  noHealthInsurance%                             1829 non-null   float64\n 29  normalizedStroke%                              1829 non-null   float64\n 30  men                                            1829 non-null   float64\n 31  normalizedNoHealthInsurance%                   1829 non-null   float64\n 32  women                                          1829 non-null   float64\n 33  normalizedMen                                  1829 non-null   float64\n 34  hispanic                                       1829 non-null   float64\n 35  normalizedWomen                                1829 non-null   float64\n 36  white                                          1829 non-null   float64\n 37  normalizedHispanic                             1829 non-null   float64\n 38  black                                          1829 non-null   float64\n 39  normalizedWhite                                1829 non-null   float64\n 40  native                                         1829 non-null   float64\n 41  normalizedBlack                                1829 non-null   float64\n 42  asian                                          1829 non-null   float64\n 43  normalizedNative                               1829 non-null   float64\n 44  pacific                                        1829 non-null   float64\n 45  normalizedAsian                                1829 non-null   float64\n 46  votingAgeCitizen                               1829 non-null   float64\n 47  normalizedPacific                              1829 non-null   float64\n 48  income                                         1829 non-null   float64\n 49  normalizedVotingAgeCitizen                     1829 non-null   float64\n 50  incomeErr                                      1829 non-null   float64\n 51  normalizedIncome                               1829 non-null   float64\n 52  incomePerCap                                   1829 non-null   float64\n 53  normalizedIncomeErr                            1829 non-null   float64\n 54  incomePerCapErr                                1829 non-null   float64\n 55  normalizedIncomePerCap                         1829 non-null   float64\n 56  poverty                                        1829 non-null   float64\n 57  normalizedIncomePerCapErr                      1829 non-null   float64\n 58  childPoverty                                   1829 non-null   float64\n 59  normalizedPoverty                              1829 non-null   float64\n 60  professional                                   1829 non-null   float64\n 61  normalizedChildPoverty                         1829 non-null   float64\n 62  service                                        1829 non-null   float64\n 63  normalizedProfessional                         1829 non-null   float64\n 64  office                                         1829 non-null   float64\n 65  normalizedService                              1829 non-null   float64\n 66  construction                                   1829 non-null   float64\n 67  normalizedOffice                               1829 non-null   float64\n 68  production                                     1829 non-null   float64\n 69  normalizedConstruction                         1829 non-null   float64\n 70  drive                                          1829 non-null   float64\n 71  normalizedProduction                           1829 non-null   float64\n 72  carpool                                        1829 non-null   float64\n 73  normalizedDrive                                1829 non-null   float64\n 74  transit                                        1829 non-null   float64\n 75  normalizedCarpool                              1829 non-null   float64\n 76  walk                                           1829 non-null   float64\n 77  normalizedTransit                              1829 non-null   float64\n 78  otherTransp                                    1829 non-null   float64\n 79  normalizedWalk                                 1829 non-null   float64\n 80  workAtHome                                     1829 non-null   float64\n 81  normalizedOtherTransp                          1829 non-null   float64\n 82  meanCommute                                    1829 non-null   float64\n 83  normalizedWorkAtHome                           1829 non-null   float64\n 84  employed                                       1829 non-null   float64\n 85  normalizedMeanCommute                          1829 non-null   float64\n 86  privateWork                                    1829 non-null   float64\n 87  normalizedEmployed                             1829 non-null   float64\n 88  publicWork                                     1829 non-null   float64\n 89  normalizedPrivateWork                          1829 non-null   float64\n 90  selfEmployed                                   1829 non-null   float64\n 91  normalizedPublicWork                           1829 non-null   float64\n 92  familyWork                                     1829 non-null   float64\n 93  normalizedSelfEmployed                         1829 non-null   float64\n 94  unemployment                                   1829 non-null   float64\n 95  normalizedFamilyWork                           1829 non-null   float64\n 96  normalizedUnemployment                         1829 non-null   float64\n 97  regionInitials                                 1829 non-null   object \ndtypes: float64(96), int64(1), object(1)\nmemory usage: 1.4+ MB\n"}},"pos":28,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":22,"id":"f2a9cd","input":"county_df['regionInitials'] = county_info['regionInitials'].first()","pos":29,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":23,"id":"a93df7","input":"condition_1 = 'normalizedStroke%'\ncondition_2 = 'normalizedCurrentAsthma%'\nlow_income_counties = county_df[county_df.normalizedIncomePerCap < 0.3]\noverperforming_counties = low_income_counties[(low_income_counties[condition_1] < 0.3) & (low_income_counties[condition_2] < 0.3)]\noverperforming_counties","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>arthritis%</th>\n      <th>population</th>\n      <th>highBP%</th>\n      <th>normalizedArthritis%</th>\n      <th>nonSkinCancer%</th>\n      <th>normalizedHighBP%</th>\n      <th>currentAsthma%</th>\n      <th>normalizedNonSkinCancer%</th>\n      <th>coronaryHeartDisease%</th>\n      <th>normalizedCurrentAsthma%</th>\n      <th>...</th>\n      <th>publicWork</th>\n      <th>normalizedPrivateWork</th>\n      <th>selfEmployed</th>\n      <th>normalizedPublicWork</th>\n      <th>familyWork</th>\n      <th>normalizedSelfEmployed</th>\n      <th>unemployment</th>\n      <th>normalizedFamilyWork</th>\n      <th>normalizedUnemployment</th>\n      <th>regionInitials</th>\n    </tr>\n    <tr>\n      <th>countyName</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Adams</th>\n      <td>24.71</td>\n      <td>786662</td>\n      <td>28.66</td>\n      <td>0.349188</td>\n      <td>6.32</td>\n      <td>0.255191</td>\n      <td>9.71</td>\n      <td>0.323864</td>\n      <td>5.48</td>\n      <td>0.295014</td>\n      <td>...</td>\n      <td>11.47</td>\n      <td>0.901711</td>\n      <td>5.80</td>\n      <td>0.102349</td>\n      <td>0.17</td>\n      <td>0.152632</td>\n      <td>5.66</td>\n      <td>0.026899</td>\n      <td>0.195307</td>\n      <td>W</td>\n    </tr>\n    <tr>\n      <th>Alachua</th>\n      <td>20.94</td>\n      <td>241410</td>\n      <td>28.25</td>\n      <td>0.203403</td>\n      <td>5.94</td>\n      <td>0.242853</td>\n      <td>9.73</td>\n      <td>0.269886</td>\n      <td>5.22</td>\n      <td>0.297784</td>\n      <td>...</td>\n      <td>25.41</td>\n      <td>0.685580</td>\n      <td>4.32</td>\n      <td>0.336242</td>\n      <td>0.09</td>\n      <td>0.113684</td>\n      <td>6.72</td>\n      <td>0.014241</td>\n      <td>0.231884</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>Bailey</th>\n      <td>22.30</td>\n      <td>7165</td>\n      <td>33.40</td>\n      <td>0.255994</td>\n      <td>6.60</td>\n      <td>0.397833</td>\n      <td>8.20</td>\n      <td>0.363636</td>\n      <td>6.30</td>\n      <td>0.085873</td>\n      <td>...</td>\n      <td>11.80</td>\n      <td>0.806390</td>\n      <td>10.40</td>\n      <td>0.107886</td>\n      <td>0.80</td>\n      <td>0.273684</td>\n      <td>2.20</td>\n      <td>0.126582</td>\n      <td>0.075914</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>Barrow</th>\n      <td>24.26</td>\n      <td>69367</td>\n      <td>31.61</td>\n      <td>0.331787</td>\n      <td>6.04</td>\n      <td>0.343966</td>\n      <td>9.34</td>\n      <td>0.284091</td>\n      <td>5.73</td>\n      <td>0.243767</td>\n      <td>...</td>\n      <td>12.64</td>\n      <td>0.902758</td>\n      <td>4.62</td>\n      <td>0.121980</td>\n      <td>0.11</td>\n      <td>0.121579</td>\n      <td>6.67</td>\n      <td>0.017405</td>\n      <td>0.230159</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>Bell</th>\n      <td>22.19</td>\n      <td>338607</td>\n      <td>32.18</td>\n      <td>0.251740</td>\n      <td>5.44</td>\n      <td>0.361119</td>\n      <td>9.66</td>\n      <td>0.198864</td>\n      <td>5.46</td>\n      <td>0.288089</td>\n      <td>...</td>\n      <td>24.44</td>\n      <td>0.690119</td>\n      <td>4.99</td>\n      <td>0.319966</td>\n      <td>0.12</td>\n      <td>0.131316</td>\n      <td>8.70</td>\n      <td>0.018987</td>\n      <td>0.300207</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>Wabaunsee</th>\n      <td>27.17</td>\n      <td>7053</td>\n      <td>35.44</td>\n      <td>0.444316</td>\n      <td>8.04</td>\n      <td>0.459224</td>\n      <td>9.26</td>\n      <td>0.568182</td>\n      <td>6.07</td>\n      <td>0.232687</td>\n      <td>...</td>\n      <td>19.83</td>\n      <td>0.734811</td>\n      <td>6.72</td>\n      <td>0.242617</td>\n      <td>0.38</td>\n      <td>0.176842</td>\n      <td>4.33</td>\n      <td>0.060127</td>\n      <td>0.149413</td>\n      <td>MW</td>\n    </tr>\n    <tr>\n      <th>Webb</th>\n      <td>17.52</td>\n      <td>250302</td>\n      <td>30.36</td>\n      <td>0.071152</td>\n      <td>4.04</td>\n      <td>0.306350</td>\n      <td>8.52</td>\n      <td>0.000000</td>\n      <td>5.91</td>\n      <td>0.130194</td>\n      <td>...</td>\n      <td>16.02</td>\n      <td>0.795915</td>\n      <td>7.25</td>\n      <td>0.178691</td>\n      <td>0.24</td>\n      <td>0.190789</td>\n      <td>6.02</td>\n      <td>0.037975</td>\n      <td>0.207729</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>Winona</th>\n      <td>19.32</td>\n      <td>51461</td>\n      <td>26.03</td>\n      <td>0.140758</td>\n      <td>6.57</td>\n      <td>0.176046</td>\n      <td>9.64</td>\n      <td>0.359375</td>\n      <td>5.42</td>\n      <td>0.285319</td>\n      <td>...</td>\n      <td>11.27</td>\n      <td>0.909043</td>\n      <td>5.44</td>\n      <td>0.098993</td>\n      <td>0.29</td>\n      <td>0.143158</td>\n      <td>5.10</td>\n      <td>0.045886</td>\n      <td>0.175983</td>\n      <td>MW</td>\n    </tr>\n    <tr>\n      <th>Woodbury</th>\n      <td>23.09</td>\n      <td>102172</td>\n      <td>31.25</td>\n      <td>0.286543</td>\n      <td>6.92</td>\n      <td>0.333133</td>\n      <td>8.55</td>\n      <td>0.409091</td>\n      <td>5.92</td>\n      <td>0.134349</td>\n      <td>...</td>\n      <td>10.28</td>\n      <td>0.940293</td>\n      <td>4.89</td>\n      <td>0.082383</td>\n      <td>0.05</td>\n      <td>0.128684</td>\n      <td>4.91</td>\n      <td>0.007911</td>\n      <td>0.169427</td>\n      <td>MW</td>\n    </tr>\n    <tr>\n      <th>Woodward</th>\n      <td>25.50</td>\n      <td>20081</td>\n      <td>36.43</td>\n      <td>0.379737</td>\n      <td>7.09</td>\n      <td>0.489016</td>\n      <td>9.66</td>\n      <td>0.433239</td>\n      <td>6.73</td>\n      <td>0.288089</td>\n      <td>...</td>\n      <td>12.70</td>\n      <td>0.855971</td>\n      <td>6.93</td>\n      <td>0.122987</td>\n      <td>0.41</td>\n      <td>0.182368</td>\n      <td>5.83</td>\n      <td>0.064873</td>\n      <td>0.201173</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n<p>68 rows × 98 columns</p>\n</div>","text/plain":"            arthritis%  population  highBP%  normalizedArthritis%  \\\ncountyName                                                          \nAdams            24.71      786662    28.66              0.349188   \nAlachua          20.94      241410    28.25              0.203403   \nBailey           22.30        7165    33.40              0.255994   \nBarrow           24.26       69367    31.61              0.331787   \nBell             22.19      338607    32.18              0.251740   \n...                ...         ...      ...                   ...   \nWabaunsee        27.17        7053    35.44              0.444316   \nWebb             17.52      250302    30.36              0.071152   \nWinona           19.32       51461    26.03              0.140758   \nWoodbury         23.09      102172    31.25              0.286543   \nWoodward         25.50       20081    36.43              0.379737   \n\n            nonSkinCancer%  normalizedHighBP%  currentAsthma%  \\\ncountyName                                                      \nAdams                 6.32           0.255191            9.71   \nAlachua               5.94           0.242853            9.73   \nBailey                6.60           0.397833            8.20   \nBarrow                6.04           0.343966            9.34   \nBell                  5.44           0.361119            9.66   \n...                    ...                ...             ...   \nWabaunsee             8.04           0.459224            9.26   \nWebb                  4.04           0.306350            8.52   \nWinona                6.57           0.176046            9.64   \nWoodbury              6.92           0.333133            8.55   \nWoodward              7.09           0.489016            9.66   \n\n            normalizedNonSkinCancer%  coronaryHeartDisease%  \\\ncountyName                                                    \nAdams                       0.323864                   5.48   \nAlachua                     0.269886                   5.22   \nBailey                      0.363636                   6.30   \nBarrow                      0.284091                   5.73   \nBell                        0.198864                   5.46   \n...                              ...                    ...   \nWabaunsee                   0.568182                   6.07   \nWebb                        0.000000                   5.91   \nWinona                      0.359375                   5.42   \nWoodbury                    0.409091                   5.92   \nWoodward                    0.433239                   6.73   \n\n            normalizedCurrentAsthma%  ...  publicWork  normalizedPrivateWork  \\\ncountyName                            ...                                      \nAdams                       0.295014  ...       11.47               0.901711   \nAlachua                     0.297784  ...       25.41               0.685580   \nBailey                      0.085873  ...       11.80               0.806390   \nBarrow                      0.243767  ...       12.64               0.902758   \nBell                        0.288089  ...       24.44               0.690119   \n...                              ...  ...         ...                    ...   \nWabaunsee                   0.232687  ...       19.83               0.734811   \nWebb                        0.130194  ...       16.02               0.795915   \nWinona                      0.285319  ...       11.27               0.909043   \nWoodbury                    0.134349  ...       10.28               0.940293   \nWoodward                    0.288089  ...       12.70               0.855971   \n\n            selfEmployed  normalizedPublicWork  familyWork  \\\ncountyName                                                   \nAdams               5.80              0.102349        0.17   \nAlachua             4.32              0.336242        0.09   \nBailey             10.40              0.107886        0.80   \nBarrow              4.62              0.121980        0.11   \nBell                4.99              0.319966        0.12   \n...                  ...                   ...         ...   \nWabaunsee           6.72              0.242617        0.38   \nWebb                7.25              0.178691        0.24   \nWinona              5.44              0.098993        0.29   \nWoodbury            4.89              0.082383        0.05   \nWoodward            6.93              0.122987        0.41   \n\n            normalizedSelfEmployed  unemployment  normalizedFamilyWork  \\\ncountyName                                                               \nAdams                     0.152632          5.66              0.026899   \nAlachua                   0.113684          6.72              0.014241   \nBailey                    0.273684          2.20              0.126582   \nBarrow                    0.121579          6.67              0.017405   \nBell                      0.131316          8.70              0.018987   \n...                            ...           ...                   ...   \nWabaunsee                 0.176842          4.33              0.060127   \nWebb                      0.190789          6.02              0.037975   \nWinona                    0.143158          5.10              0.045886   \nWoodbury                  0.128684          4.91              0.007911   \nWoodward                  0.182368          5.83              0.064873   \n\n            normalizedUnemployment  regionInitials  \ncountyName                                          \nAdams                     0.195307               W  \nAlachua                   0.231884               S  \nBailey                    0.075914               S  \nBarrow                    0.230159               S  \nBell                      0.300207               S  \n...                            ...             ...  \nWabaunsee                 0.149413              MW  \nWebb                      0.207729               S  \nWinona                    0.175983              MW  \nWoodbury                  0.169427              MW  \nWoodward                  0.201173               S  \n\n[68 rows x 98 columns]"},"exec_count":23,"output_type":"execute_result"}},"pos":30,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":24,"id":"79550c","input":"plt.hist(overperforming_counties_phys['normalizedBadMentalHealth%'])\nplt.title(\"Mean: \" + str(overperforming_counties_phys['normalizedBadMentalHealth%'].mean()))\nplt.show()\n\nplt.hist(county_df['normalizedBadMentalHealth%'])\nplt.title(\"Mean: \" + str(county_df['normalizedBadMentalHealth%'].mean()))\nplt.show()\n","output":{"0":{"ename":"NameError","evalue":"name 'overperforming_counties_phys' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_22304/1145052267.py\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moverperforming_counties_phys\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'normalizedBadMentalHealth%'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Mean: \"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moverperforming_counties_phys\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'normalizedBadMentalHealth%'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcounty_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'normalizedBadMentalHealth%'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'overperforming_counties_phys' is not defined"]}},"pos":33,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":25,"id":"0007fc","input":"plt.hist(overperforming_counties_ment['normalizedBadPhysicalHealth%'])\nplt.title(\"Mean: \" + str(overperforming_counties_ment['normalizedBadPhysicalHealth%'].mean()))\n\nplt.show()\n\nplt.hist(county_df['normalizedBadPhysicalHealth%'])\nplt.title(\"Mean: \" + str(county_df['normalizedBadPhysicalHealth%'].mean()))\n\nplt.show()","output":{"0":{"ename":"NameError","evalue":"name 'overperforming_counties_ment' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_22304/3043991534.py\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moverperforming_counties_ment\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'normalizedBadPhysicalHealth%'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Mean: \"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moverperforming_counties_ment\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'normalizedBadPhysicalHealth%'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'overperforming_counties_ment' is not defined"]}},"pos":34,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":26,"id":"5b5317","input":"plt.hist(overperforming_counties.normalizedBadPhysicalHealth)\nplt.show()","output":{"0":{"ename":"AttributeError","evalue":"'DataFrame' object has no attribute 'normalizedBadPhysicalHealth'","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_22304/1947635289.py\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moverperforming_counties\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnormalizedBadPhysicalHealth\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   5573\u001b[0m         ):\n\u001b[1;32m   5574\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5575\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5576\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5577\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'normalizedBadPhysicalHealth'"]}},"pos":35,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":27,"id":"29e609","input":"overperforming_counties","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>arthritis%</th>\n      <th>population</th>\n      <th>highBP%</th>\n      <th>normalizedArthritis%</th>\n      <th>nonSkinCancer%</th>\n      <th>normalizedHighBP%</th>\n      <th>currentAsthma%</th>\n      <th>normalizedNonSkinCancer%</th>\n      <th>coronaryHeartDisease%</th>\n      <th>normalizedCurrentAsthma%</th>\n      <th>...</th>\n      <th>publicWork</th>\n      <th>normalizedPrivateWork</th>\n      <th>selfEmployed</th>\n      <th>normalizedPublicWork</th>\n      <th>familyWork</th>\n      <th>normalizedSelfEmployed</th>\n      <th>unemployment</th>\n      <th>normalizedFamilyWork</th>\n      <th>normalizedUnemployment</th>\n      <th>regionInitials</th>\n    </tr>\n    <tr>\n      <th>countyName</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Adams</th>\n      <td>24.71</td>\n      <td>786662</td>\n      <td>28.66</td>\n      <td>0.349188</td>\n      <td>6.32</td>\n      <td>0.255191</td>\n      <td>9.71</td>\n      <td>0.323864</td>\n      <td>5.48</td>\n      <td>0.295014</td>\n      <td>...</td>\n      <td>11.47</td>\n      <td>0.901711</td>\n      <td>5.80</td>\n      <td>0.102349</td>\n      <td>0.17</td>\n      <td>0.152632</td>\n      <td>5.66</td>\n      <td>0.026899</td>\n      <td>0.195307</td>\n      <td>W</td>\n    </tr>\n    <tr>\n      <th>Alachua</th>\n      <td>20.94</td>\n      <td>241410</td>\n      <td>28.25</td>\n      <td>0.203403</td>\n      <td>5.94</td>\n      <td>0.242853</td>\n      <td>9.73</td>\n      <td>0.269886</td>\n      <td>5.22</td>\n      <td>0.297784</td>\n      <td>...</td>\n      <td>25.41</td>\n      <td>0.685580</td>\n      <td>4.32</td>\n      <td>0.336242</td>\n      <td>0.09</td>\n      <td>0.113684</td>\n      <td>6.72</td>\n      <td>0.014241</td>\n      <td>0.231884</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>Bailey</th>\n      <td>22.30</td>\n      <td>7165</td>\n      <td>33.40</td>\n      <td>0.255994</td>\n      <td>6.60</td>\n      <td>0.397833</td>\n      <td>8.20</td>\n      <td>0.363636</td>\n      <td>6.30</td>\n      <td>0.085873</td>\n      <td>...</td>\n      <td>11.80</td>\n      <td>0.806390</td>\n      <td>10.40</td>\n      <td>0.107886</td>\n      <td>0.80</td>\n      <td>0.273684</td>\n      <td>2.20</td>\n      <td>0.126582</td>\n      <td>0.075914</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>Barrow</th>\n      <td>24.26</td>\n      <td>69367</td>\n      <td>31.61</td>\n      <td>0.331787</td>\n      <td>6.04</td>\n      <td>0.343966</td>\n      <td>9.34</td>\n      <td>0.284091</td>\n      <td>5.73</td>\n      <td>0.243767</td>\n      <td>...</td>\n      <td>12.64</td>\n      <td>0.902758</td>\n      <td>4.62</td>\n      <td>0.121980</td>\n      <td>0.11</td>\n      <td>0.121579</td>\n      <td>6.67</td>\n      <td>0.017405</td>\n      <td>0.230159</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>Bell</th>\n      <td>22.19</td>\n      <td>338607</td>\n      <td>32.18</td>\n      <td>0.251740</td>\n      <td>5.44</td>\n      <td>0.361119</td>\n      <td>9.66</td>\n      <td>0.198864</td>\n      <td>5.46</td>\n      <td>0.288089</td>\n      <td>...</td>\n      <td>24.44</td>\n      <td>0.690119</td>\n      <td>4.99</td>\n      <td>0.319966</td>\n      <td>0.12</td>\n      <td>0.131316</td>\n      <td>8.70</td>\n      <td>0.018987</td>\n      <td>0.300207</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>Wabaunsee</th>\n      <td>27.17</td>\n      <td>7053</td>\n      <td>35.44</td>\n      <td>0.444316</td>\n      <td>8.04</td>\n      <td>0.459224</td>\n      <td>9.26</td>\n      <td>0.568182</td>\n      <td>6.07</td>\n      <td>0.232687</td>\n      <td>...</td>\n      <td>19.83</td>\n      <td>0.734811</td>\n      <td>6.72</td>\n      <td>0.242617</td>\n      <td>0.38</td>\n      <td>0.176842</td>\n      <td>4.33</td>\n      <td>0.060127</td>\n      <td>0.149413</td>\n      <td>MW</td>\n    </tr>\n    <tr>\n      <th>Webb</th>\n      <td>17.52</td>\n      <td>250302</td>\n      <td>30.36</td>\n      <td>0.071152</td>\n      <td>4.04</td>\n      <td>0.306350</td>\n      <td>8.52</td>\n      <td>0.000000</td>\n      <td>5.91</td>\n      <td>0.130194</td>\n      <td>...</td>\n      <td>16.02</td>\n      <td>0.795915</td>\n      <td>7.25</td>\n      <td>0.178691</td>\n      <td>0.24</td>\n      <td>0.190789</td>\n      <td>6.02</td>\n      <td>0.037975</td>\n      <td>0.207729</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>Winona</th>\n      <td>19.32</td>\n      <td>51461</td>\n      <td>26.03</td>\n      <td>0.140758</td>\n      <td>6.57</td>\n      <td>0.176046</td>\n      <td>9.64</td>\n      <td>0.359375</td>\n      <td>5.42</td>\n      <td>0.285319</td>\n      <td>...</td>\n      <td>11.27</td>\n      <td>0.909043</td>\n      <td>5.44</td>\n      <td>0.098993</td>\n      <td>0.29</td>\n      <td>0.143158</td>\n      <td>5.10</td>\n      <td>0.045886</td>\n      <td>0.175983</td>\n      <td>MW</td>\n    </tr>\n    <tr>\n      <th>Woodbury</th>\n      <td>23.09</td>\n      <td>102172</td>\n      <td>31.25</td>\n      <td>0.286543</td>\n      <td>6.92</td>\n      <td>0.333133</td>\n      <td>8.55</td>\n      <td>0.409091</td>\n      <td>5.92</td>\n      <td>0.134349</td>\n      <td>...</td>\n      <td>10.28</td>\n      <td>0.940293</td>\n      <td>4.89</td>\n      <td>0.082383</td>\n      <td>0.05</td>\n      <td>0.128684</td>\n      <td>4.91</td>\n      <td>0.007911</td>\n      <td>0.169427</td>\n      <td>MW</td>\n    </tr>\n    <tr>\n      <th>Woodward</th>\n      <td>25.50</td>\n      <td>20081</td>\n      <td>36.43</td>\n      <td>0.379737</td>\n      <td>7.09</td>\n      <td>0.489016</td>\n      <td>9.66</td>\n      <td>0.433239</td>\n      <td>6.73</td>\n      <td>0.288089</td>\n      <td>...</td>\n      <td>12.70</td>\n      <td>0.855971</td>\n      <td>6.93</td>\n      <td>0.122987</td>\n      <td>0.41</td>\n      <td>0.182368</td>\n      <td>5.83</td>\n      <td>0.064873</td>\n      <td>0.201173</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n<p>68 rows × 98 columns</p>\n</div>","text/plain":"            arthritis%  population  highBP%  normalizedArthritis%  \\\ncountyName                                                          \nAdams            24.71      786662    28.66              0.349188   \nAlachua          20.94      241410    28.25              0.203403   \nBailey           22.30        7165    33.40              0.255994   \nBarrow           24.26       69367    31.61              0.331787   \nBell             22.19      338607    32.18              0.251740   \n...                ...         ...      ...                   ...   \nWabaunsee        27.17        7053    35.44              0.444316   \nWebb             17.52      250302    30.36              0.071152   \nWinona           19.32       51461    26.03              0.140758   \nWoodbury         23.09      102172    31.25              0.286543   \nWoodward         25.50       20081    36.43              0.379737   \n\n            nonSkinCancer%  normalizedHighBP%  currentAsthma%  \\\ncountyName                                                      \nAdams                 6.32           0.255191            9.71   \nAlachua               5.94           0.242853            9.73   \nBailey                6.60           0.397833            8.20   \nBarrow                6.04           0.343966            9.34   \nBell                  5.44           0.361119            9.66   \n...                    ...                ...             ...   \nWabaunsee             8.04           0.459224            9.26   \nWebb                  4.04           0.306350            8.52   \nWinona                6.57           0.176046            9.64   \nWoodbury              6.92           0.333133            8.55   \nWoodward              7.09           0.489016            9.66   \n\n            normalizedNonSkinCancer%  coronaryHeartDisease%  \\\ncountyName                                                    \nAdams                       0.323864                   5.48   \nAlachua                     0.269886                   5.22   \nBailey                      0.363636                   6.30   \nBarrow                      0.284091                   5.73   \nBell                        0.198864                   5.46   \n...                              ...                    ...   \nWabaunsee                   0.568182                   6.07   \nWebb                        0.000000                   5.91   \nWinona                      0.359375                   5.42   \nWoodbury                    0.409091                   5.92   \nWoodward                    0.433239                   6.73   \n\n            normalizedCurrentAsthma%  ...  publicWork  normalizedPrivateWork  \\\ncountyName                            ...                                      \nAdams                       0.295014  ...       11.47               0.901711   \nAlachua                     0.297784  ...       25.41               0.685580   \nBailey                      0.085873  ...       11.80               0.806390   \nBarrow                      0.243767  ...       12.64               0.902758   \nBell                        0.288089  ...       24.44               0.690119   \n...                              ...  ...         ...                    ...   \nWabaunsee                   0.232687  ...       19.83               0.734811   \nWebb                        0.130194  ...       16.02               0.795915   \nWinona                      0.285319  ...       11.27               0.909043   \nWoodbury                    0.134349  ...       10.28               0.940293   \nWoodward                    0.288089  ...       12.70               0.855971   \n\n            selfEmployed  normalizedPublicWork  familyWork  \\\ncountyName                                                   \nAdams               5.80              0.102349        0.17   \nAlachua             4.32              0.336242        0.09   \nBailey             10.40              0.107886        0.80   \nBarrow              4.62              0.121980        0.11   \nBell                4.99              0.319966        0.12   \n...                  ...                   ...         ...   \nWabaunsee           6.72              0.242617        0.38   \nWebb                7.25              0.178691        0.24   \nWinona              5.44              0.098993        0.29   \nWoodbury            4.89              0.082383        0.05   \nWoodward            6.93              0.122987        0.41   \n\n            normalizedSelfEmployed  unemployment  normalizedFamilyWork  \\\ncountyName                                                               \nAdams                     0.152632          5.66              0.026899   \nAlachua                   0.113684          6.72              0.014241   \nBailey                    0.273684          2.20              0.126582   \nBarrow                    0.121579          6.67              0.017405   \nBell                      0.131316          8.70              0.018987   \n...                            ...           ...                   ...   \nWabaunsee                 0.176842          4.33              0.060127   \nWebb                      0.190789          6.02              0.037975   \nWinona                    0.143158          5.10              0.045886   \nWoodbury                  0.128684          4.91              0.007911   \nWoodward                  0.182368          5.83              0.064873   \n\n            normalizedUnemployment  regionInitials  \ncountyName                                          \nAdams                     0.195307               W  \nAlachua                   0.231884               S  \nBailey                    0.075914               S  \nBarrow                    0.230159               S  \nBell                      0.300207               S  \n...                            ...             ...  \nWabaunsee                 0.149413              MW  \nWebb                      0.207729               S  \nWinona                    0.175983              MW  \nWoodbury                  0.169427              MW  \nWoodward                  0.201173               S  \n\n[68 rows x 98 columns]"},"exec_count":27,"output_type":"execute_result"}},"pos":36,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":28,"id":"1f3acf","input":"column = 'normalizedVotingAgeCitizen'\nplt.hist(overperforming_counties[column])\nplt.title(\"Mean: \" + str(overperforming_counties[column].mean()))\nplt.show()\n\nplt.hist(county_df[column])\nplt.title(\"Mean: \" + str(county_df[column].mean()))\nplt.show()","output":{"0":{"data":{"image/png":"9bbb5ebe901184073cca20cebc9d18451cc2388a","text/plain":"<Figure size 720x288 with 1 Axes>"},"exec_count":28,"metadata":{"image/png":{"height":263,"width":592},"needs_background":"light"},"output_type":"execute_result"},"1":{"data":{"image/png":"92d9bc6eeacfb9043c0f4b95d287a26460b51ca2","text/plain":"<Figure size 720x288 with 1 Axes>"},"exec_count":28,"metadata":{"image/png":{"height":263,"width":598},"needs_background":"light"},"output_type":"execute_result"}},"pos":37,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":29,"id":"79b27e","input":"import sklearn\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.cluster import KMeans","pos":39,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":3,"id":"56fa6b","input":"noEducationDF = pd.read_csv('../Clean Data/finalDatasetNoEducation.csv')\nnoEducationDF[['income','incomePerCap']].head()\nnoEducationDF['normalizedIncome']=noEducationDF['income'].apply(lambda x:x/250000)\nnoEducationDF['normalizedIncomePerCap']=noEducationDF['incomePerCap'].apply(lambda x:x/np.max(noEducationDF.incomePerCap))\nnoEducationDF.columns","output":{"0":{"data":{"text/plain":"Index(['Unnamed: 0', 'stateInitials', 'stateName', 'countyName', 'countyID',\n       'tractID', 'population', 'noHealthInsurance%', 'arthritis%',\n       'bingeDrinking%', 'highBP%', 'medicineToLowerBP%', 'nonSkinCancer%',\n       'currentAsthma%', 'cervicalCancer%', 'coronaryHeartDisease%',\n       'routineCheckUp%', 'cholestorolScreening%', 'colonScreening%',\n       'chronicObstructivePulmonaryDisease%',\n       'menUpToDateOnVaccinesAndScreenings%',\n       'womenUpToDateOnVaccinesAndScreenings%', 'currentSmoking%',\n       'routineDentalCheckup%', 'depression%', 'diabetes%',\n       'fairOrGoodHealth%', 'highCholestorol%', 'chronicKidneyDisease%',\n       'noLeisurelyPhysicalActivity%', 'mammographyUseWomen%',\n       'badMentalHealth%', 'obesity%', 'badPhysicalHealth%',\n       'lessThan7HoursOfSleep%', 'stroke%', 'allTeethLost%', 'state', 'county',\n       'totalPop', 'men', 'women', 'hispanic', 'white', 'black', 'native',\n       'asian', 'pacific', 'votingAgeCitizen', 'income', 'incomeErr',\n       'incomePerCap', 'incomePerCapErr', 'poverty', 'childPoverty',\n       'professional', 'service', 'office', 'construction', 'production',\n       'drive', 'carpool', 'transit', 'walk', 'otherTransp', 'workAtHome',\n       'meanCommute', 'employed', 'privateWork', 'publicWork', 'selfEmployed',\n       'familyWork', 'unemployment', 'normalizedIncome',\n       'normalizedIncomePerCap'],\n      dtype='object')"},"exec_count":3,"output_type":"execute_result"}},"pos":3,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":3,"id":"ec7299","input":"# noEducationDF = noEducationDF.drop('Unnamed: 0',axis=1)\nsns.heatmap(noEducationDF[['badMentalHealth%', 'obesity%', 'badPhysicalHealth%','white', 'black', 'native', 'asian', 'pacific', \"income\", \"meanCommute\", 'drive', 'carpool', 'transit', 'walk', 'otherTransp']].corr(), cmap=\"YlOrRd\")\nplt.title(\"Heatmap health, race, and socioeconomic data\", fontsize=15)","output":{"0":{"data":{"text/plain":"Text(0.5, 1.0, 'Heatmap health, race, and socioeconomic data')"},"exec_count":3,"output_type":"execute_result"},"1":{"data":{"image/png":"6323328e5df057eeb8d5521363be106862ee129b","text/plain":"<Figure size 864x504 with 2 Axes>"},"exec_count":3,"metadata":{"image/png":{"height":521,"width":749},"needs_background":"light"},"output_type":"execute_result"}},"pos":4,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":30,"id":"6e3725","input":"kmm = KMeans(n_clusters=4,max_iter=500)\nkmm.fit(noEducationDF[['income']])\n\nastar,bstar = regression_parameters(np.array(noEducationDF['noHealthInsurance%']),np.array(noEducationDF['badPhysicalHealth%']))\nplt.plot(np.linspace(0,80),astar*np.linspace(0,70)+bstar,color='orange')\nplt.scatter(noEducationDF['noHealthInsurance%'],noEducationDF['badPhysicalHealth%'],c=kmm.predict(noEducationDF[['income']]),s=0.5)\nplt.xlabel('No Health Insurance Percentage', color = \"white\")\nplt.ylabel('Bad Physical Health Outcomes Percentage', color = \"white\")\nplt.title('Clustering of Bad Physical Health Outcomes vs No Health Insurance', color = \"white\")\n\n\nplt.show()\n\nastar,bstar = regression_parameters(np.array(noEducationDF['noHealthInsurance%']),np.array(noEducationDF['badMentalHealth%']))\nplt.plot(np.linspace(0,80),astar*np.linspace(0,70)+bstar,color='orange')\nplt.scatter(noEducationDF['noHealthInsurance%'],noEducationDF['badMentalHealth%'],c=kmm.predict(noEducationDF[['income']]),s=0.5)\nplt.xlabel('No Health Insurance Percentage')\nplt.ylabel('Bad Mental Health Percentage')\nplt.title('Bad Mental Health vs No Health Insurance')\nplt.show()\n\nastar,bstar = regression_parameters(np.array(noEducationDF['noHealthInsurance%']),np.array(noEducationDF[['income']]))\nplt.plot(np.linspace(0,80),astar*np.linspace(0,70)+bstar,color='orange')\nplt.scatter(noEducationDF['noHealthInsurance%'],noEducationDF['income'],c=kmm.predict(noEducationDF[['income']]),s=0.5)\nplt.xlabel('No Health Insurance Percentage')\nplt.ylabel('Median Income')\nplt.title('Income vs No Health Insurance')\nplt.show()\n\nplt.scatter(noEducationDF['income'],noEducationDF['badPhysicalHealth%'],c=kmm.predict(noEducationDF[['income']]))\nplt.xlabel('Median Income')\nplt.ylabel('Bad Physical Health Percentage')\nplt.title('Income vs Bad Physical Health')\nplt.show()\n\nplt.scatter(noEducationDF['income'],noEducationDF['badMentalHealth%'],c=kmm.predict(noEducationDF[['income']]))\nplt.xlabel('Median Income')\nplt.ylabel('Bad Mental Health Percentage')\nplt.title('Income vs Bad Mental Health')\nplt.show()\n\n","output":{"0":{"data":{"image/png":"29d478bce8c00eb3591a0127da9ac36511321599","text/plain":"<Figure size 720x288 with 1 Axes>"},"exec_count":30,"metadata":{"image/png":{"height":277,"width":605},"needs_background":"light"},"output_type":"execute_result"},"1":{"data":{"image/png":"132a17bee9b28b78ec576777d1aa47367809bb78","text/plain":"<Figure size 720x288 with 1 Axes>"},"exec_count":30,"metadata":{"image/png":{"height":277,"width":605},"needs_background":"light"},"output_type":"execute_result"},"2":{"data":{"image/png":"bd1b54cbf4ede89343ba98f8aca51361046a023c","text/plain":"<Figure size 720x288 with 1 Axes>"},"exec_count":30,"metadata":{"image/png":{"height":277,"width":633},"needs_background":"light"},"output_type":"execute_result"},"3":{"data":{"image/png":"001a6411d594f555cf0f9da62b717e58620561b5","text/plain":"<Figure size 720x288 with 1 Axes>"},"exec_count":30,"metadata":{"image/png":{"height":277,"width":605},"needs_background":"light"},"output_type":"execute_result"},"4":{"data":{"image/png":"458b0ab901af9b0e973a5753b71d70be4b978348","text/plain":"<Figure size 720x288 with 1 Axes>"},"exec_count":30,"metadata":{"image/png":{"height":277,"width":605},"needs_background":"light"},"output_type":"execute_result"}},"pos":40,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":31,"id":"6f5670","input":"kmm = KMeans(n_clusters=4,max_iter=500)\nkmm.fit(noEducationDF[['noHealthInsurance%','badPhysicalHealth%','normalizedIncome']])","output":{"0":{"data":{"text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KMeans(max_iter=500, n_clusters=4)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KMeans</label><div class=\"sk-toggleable__content\"><pre>KMeans(max_iter=500, n_clusters=4)</pre></div></div></div></div></div>","text/plain":"KMeans(max_iter=500, n_clusters=4)"},"exec_count":31,"output_type":"execute_result"}},"pos":41,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":34,"id":"35144b","input":"plt.scatter(noEducationDF[noEducationDF['income']>75000]['noHealthInsurance%'],noEducationDF[noEducationDF['income']>75000]['badMentalHealth%'],c=noEducationDF[noEducationDF['income']>75000]['income'])\nplt.xlabel('Percent of No Health Insurance')\nplt.ylabel('Bad Mental Health Percentage')\nplt.title('Income vs Bad Mental Health')\nplt.show()\n\nplt.scatter(noEducationDF[noEducationDF['income']>75000]['noHealthInsurance%'],noEducationDF[noEducationDF['income']>75000]['badPhysicalHealth%'],c=noEducationDF[noEducationDF['income']>75000]['income'])\nplt.xlabel('Percent of No Health Insurance')\nplt.ylabel('Bad Physical Health Percentage')\nplt.title('Income vs Bad Physical Health')\nplt.show()\n\nplt.scatter(noEducationDF[noEducationDF['income']>75000]['income'],noEducationDF[noEducationDF['income']>75000]['income'],c=noEducationDF[noEducationDF['income']>75000]['income'])\nplt.title('Income Color Scale For Reference')\nplt.show()","output":{"0":{"data":{"image/png":"044b328651d8331e07233f84ad6d03709103de34","text/plain":"<Figure size 720x288 with 1 Axes>"},"exec_count":34,"metadata":{"image/png":{"height":277,"width":605},"needs_background":"light"},"output_type":"execute_result"},"1":{"data":{"image/png":"578828204cd567d5d7643e46f773e2b1f6dca864","text/plain":"<Figure size 720x288 with 1 Axes>"},"exec_count":34,"metadata":{"image/png":{"height":277,"width":615},"needs_background":"light"},"output_type":"execute_result"},"2":{"data":{"image/png":"c1e328d11f6570b5b317ef179612e6205cd55f09","text/plain":"<Figure size 720x288 with 1 Axes>"},"exec_count":34,"metadata":{"image/png":{"height":263,"width":617},"needs_background":"light"},"output_type":"execute_result"}},"pos":50,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":35,"id":"cf1550","input":"from sklearn.model_selection import train_test_split\n\nXtrain,Xtest,Ytrain,Ytest = train_test_split(noEducationDF[[ 'totalPop', 'men', 'women', 'hispanic', 'white', 'black', 'native',\n       'asian', 'pacific', 'votingAgeCitizen', 'income', 'poverty', 'childPoverty',\n       'professional', 'service', 'office', 'construction', 'production',\n       'drive', 'carpool', 'transit', 'walk', 'otherTransp', 'workAtHome',\n       'meanCommute', 'employed', 'privateWork', 'publicWork', 'selfEmployed',\n       'familyWork', 'unemployment']],noEducationDF['badPhysicalHealth%'],random_state=42)","pos":51,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":36,"id":"52b17c","input":"from sklearn.neighbors import KNeighborsRegressor\n\nknnReg = KNeighborsRegressor(n_neighbors=7)\nknnReg.fit(Xtrain,Ytrain)\n\nprint(\"R2 score = \"+str(knnReg.score(Xtest,Ytest)))","output":{"0":{"name":"stdout","output_type":"stream","text":"R2 score = 0.7240779042399376\n"}},"pos":52,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":37,"id":"064701","input":"from sklearn.tree import DecisionTreeRegressor\n\ndtcReg = DecisionTreeRegressor(max_depth=4)\ndtcReg.fit(Xtrain,Ytrain)\n\nprint(\"R2 score = \"+str(dtcReg.score(Xtest,Ytest)))\n\nfrom sklearn.tree import plot_tree\n\nfig = plt.figure(figsize=(25,20))\n_=plot_tree(dtcReg)\n","output":{"0":{"name":"stdout","output_type":"stream","text":"R2 score = 0.715955705447096\n"},"1":{"data":{"image/png":"b4ead7ecf41d65cf8fd2b22b8253d02297abd79b","text/plain":"<Figure size 1800x1440 with 1 Axes>"},"exec_count":37,"metadata":{"image/png":{"height":1101,"width":1409},"needs_background":"light"},"output_type":"execute_result"}},"pos":53,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":38,"id":"b85f47","input":"print(Xtrain.columns[7],Xtrain.columns[10],Xtrain.columns[13])","output":{"0":{"name":"stdout","output_type":"stream","text":"asian income professional\n"}},"pos":54,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":39,"id":"6638c5","input":"from sklearn.model_selection import train_test_split\n\nXtrain2,Xtest2,Ytrain2,Ytest2 = train_test_split(noEducationDF[[ 'totalPop', 'men', 'women', 'hispanic', 'white', 'black', 'native',\n       'asian', 'pacific', 'votingAgeCitizen', 'income', 'poverty', 'childPoverty',\n       'professional', 'service', 'office', 'construction', 'production',\n       'drive', 'carpool', 'transit', 'walk', 'otherTransp', 'workAtHome',\n       'meanCommute', 'employed', 'privateWork', 'publicWork', 'selfEmployed',\n       'familyWork', 'unemployment']],noEducationDF['badMentalHealth%'],random_state=42)\n\nfrom sklearn.tree import DecisionTreeRegressor\n\ndtcReg = DecisionTreeRegressor(max_depth=4)\ndtcReg.fit(Xtrain2,Ytrain2)\n\nprint(\"R2 score = \"+str(dtcReg.score(Xtest2,Ytest2)))\n\nfrom sklearn.tree import plot_tree\n\nfig = plt.figure(figsize=(25,20))\n_=plot_tree(dtcReg)\n\n","output":{"0":{"name":"stdout","output_type":"stream","text":"R2 score = 0.7129730063151674\n"},"1":{"data":{"image/png":"43b3e5823a9b3cd2bd4d98ba99ba0a2467d13e63","text/plain":"<Figure size 1800x1440 with 1 Axes>"},"exec_count":39,"metadata":{"image/png":{"height":1101,"width":1409},"needs_background":"light"},"output_type":"execute_result"}},"pos":55,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":4,"id":"9a11bc","input":"def regression_parameters(x,y):\n    ### Find regression parameters for linear regression\n    xmean = x.mean()\n    ymean = y.mean()\n    \n    a_star = sum([((x[t]-xmean)*(y[t]-ymean)) for t in range(0,min(len(x),len(y)))])/sum([(x[t]-xmean)**2 for t in range(0,len(x))]) # replace with expression for a^*\n    b_star = ymean-a_star*xmean # replace with expression b^*\n    return [a_star, b_star]\n\ndef best_poly(X, Y, k):\n    ### Find regression parameters for kth degree polynomial regression\n    output = np.polyfit(X, Y, k, full=True)\n    p = output[0]\n    return p\n","pos":6,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":40,"id":"c0ec88","input":"print(Xtrain.columns[3],Xtrain.columns[7],Xtrain.columns[10],Xtrain.columns[11],Xtrain.columns[13])","output":{"0":{"name":"stdout","output_type":"stream","text":"hispanic asian income poverty professional\n"}},"pos":56,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":41,"id":"af3b99","input":"plt.scatter(noEducationDF['income'],noEducationDF['badPhysicalHealth%'])\nplt.show()\n\nplt.scatter(noEducationDF['income'],noEducationDF['badMentalHealth%'],c=noEducationDF['badPhysicalHealth%'])\nplt.show()\n\nf = plt.figure()\nf.set_figwidth(1)\nf.set_figheight(5)\nplt.scatter(np.zeros_like(noEducationDF['badPhysicalHealth%']),noEducationDF['badPhysicalHealth%'],c=noEducationDF['badPhysicalHealth%'],s=20,marker=\"s\")\nplt.xticks([])\nplt.title('Physical Health Colour Scale', fontsize=15)\nplt.show()\n\nnoEducationDF[noEducationDF['badPhysicalHealth%']<5].sort_values('income',axis=0)[['income','state','county','badPhysicalHealth%','badMentalHealth%']].head(31)\n\nplt.scatter(noEducationDF[noEducationDF['badPhysicalHealth%']<5].sort_values('income',axis=0)['income'],noEducationDF[noEducationDF['badPhysicalHealth%']<5].sort_values('income',axis=0)['badMentalHealth%'],c=noEducationDF[noEducationDF['badPhysicalHealth%']<5].sort_values('income',axis=0)['badPhysicalHealth%'])\nf = plt.figure()\nf.set_figwidth(1)\nf.set_figheight(5)\nplt.scatter(np.zeros_like(noEducationDF[noEducationDF['badPhysicalHealth%']<5].sort_values('income',axis=0)['badPhysicalHealth%']),noEducationDF[noEducationDF['badPhysicalHealth%']<5].sort_values('income',axis=0)['badPhysicalHealth%'],c=noEducationDF[noEducationDF['badPhysicalHealth%']<5].sort_values('income',axis=0)['badPhysicalHealth%'],s=20,marker=\"s\")\nplt.xticks([])\nplt.title('Physical Health Scale', fontsize=15)\nplt.show()\n","output":{"0":{"data":{"image/png":"4307e4992768c4fe4e928e5fef1b5d0b8d865cd7","text/plain":"<Figure size 720x288 with 1 Axes>"},"exec_count":41,"metadata":{"image/png":{"height":248,"width":592},"needs_background":"light"},"output_type":"execute_result"},"1":{"data":{"image/png":"0bc950bf422376620b130f8cfbe9d8e6b9cd98f8","text/plain":"<Figure size 720x288 with 1 Axes>"},"exec_count":41,"metadata":{"image/png":{"height":250,"width":592},"needs_background":"light"},"output_type":"execute_result"},"2":{"data":{"image/png":"0e81292ab6d059975ca192486700864af3008eaa","text/plain":"<Figure size 72x360 with 1 Axes>"},"exec_count":41,"metadata":{"image/png":{"height":307,"width":228},"needs_background":"light"},"output_type":"execute_result"},"3":{"data":{"image/png":"811d5391a8b1c01e98619521eea3310a3c2cb123","text/plain":"<Figure size 720x288 with 1 Axes>"},"exec_count":41,"metadata":{"image/png":{"height":248,"width":605},"needs_background":"light"},"output_type":"execute_result"},"4":{"data":{"image/png":"09604b5f8e2a0a122cd49d48cdbc4fdc1c545f37","text/plain":"<Figure size 72x360 with 1 Axes>"},"exec_count":41,"metadata":{"image/png":{"height":307,"width":174},"needs_background":"light"},"output_type":"execute_result"}},"pos":57,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":42,"id":"40dd8b","input":"plt.rcParams[\"figure.figsize\"] = (20,20)\nplt.scatter(noEducationDF['badPhysicalHealth%'],noEducationDF['badMentalHealth%'],c=noEducationDF['income'])\nplt.xlabel('Physical Health')\nplt.ylabel('Mental Health')\nplt.title('Physical vs Mental Health')\nplt.show()\n\nf = plt.figure()\nf.set_figwidth(1)\nf.set_figheight(5)\nplt.scatter(np.zeros_like(noEducationDF[noEducationDF['income']<75000]['income']),noEducationDF[noEducationDF['income']<75000]['income'],c=noEducationDF[noEducationDF['income']<75000]['income'],s=20,marker=\"s\")\nplt.xticks([])\nplt.title('Income Color Scale', fontsize=15)\nplt.show()","output":{"0":{"data":{"image/png":"9e51ddc0add7b119a73e4ed99c93985a01f3d141","text/plain":"<Figure size 1440x1440 with 1 Axes>"},"exec_count":42,"metadata":{"image/png":{"height":1147,"width":1163},"needs_background":"light"},"output_type":"execute_result"},"1":{"data":{"image/png":"13ce12a014b0ca2ef8dcbf0c4fc5b294dd9b3295","text/plain":"<Figure size 72x360 with 1 Axes>"},"exec_count":42,"metadata":{"image/png":{"height":307,"width":158},"needs_background":"light"},"output_type":"execute_result"}},"pos":58,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":43,"id":"fe8a8b","input":"","output":{"0":{"name":"stderr","output_type":"stream","text":"/usr/local/lib/python3.8/dist-packages/sklearn/base.py:450: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names\n  warnings.warn(\n"},"1":{"ename":"ValueError","evalue":"Expected 2D array, got 1D array instead:\narray=[  0.           2.04081633   4.08163265   6.12244898   8.16326531\n  10.20408163  12.24489796  14.28571429  16.32653061  18.36734694\n  20.40816327  22.44897959  24.48979592  26.53061224  28.57142857\n  30.6122449   32.65306122  34.69387755  36.73469388  38.7755102\n  40.81632653  42.85714286  44.89795918  46.93877551  48.97959184\n  51.02040816  53.06122449  55.10204082  57.14285714  59.18367347\n  61.2244898   63.26530612  65.30612245  67.34693878  69.3877551\n  71.42857143  73.46938776  75.51020408  77.55102041  79.59183673\n  81.63265306  83.67346939  85.71428571  87.75510204  89.79591837\n  91.83673469  93.87755102  95.91836735  97.95918367 100.        ].\nReshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_22304/795562127.py\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnoEducationDF\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mthing\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mnoEducationDF\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'income'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mthing\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinspace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mlm\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinspace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/sklearn/linear_model/_base.py\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    384\u001b[0m             \u001b[0mReturns\u001b[0m \u001b[0mpredicted\u001b[0m \u001b[0mvalues\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    385\u001b[0m         \"\"\"\n\u001b[0;32m--> 386\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_decision_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    387\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    388\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_set_intercept\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_offset\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_offset\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_scale\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/sklearn/linear_model/_base.py\u001b[0m in \u001b[0;36m_decision_function\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    367\u001b[0m         \u001b[0mcheck_is_fitted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    368\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 369\u001b[0;31m         \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maccept_sparse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"csr\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"csc\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"coo\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreset\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    370\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0msafe_sparse_dot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcoef_\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mT\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdense_output\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mintercept_\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    371\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36m_validate_data\u001b[0;34m(self, X, y, reset, validate_separately, **check_params)\u001b[0m\n\u001b[1;32m    575\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Validation should be done on X, y or both.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    576\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mno_val_X\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mno_val_y\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 577\u001b[0;31m             \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"X\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    578\u001b[0m             \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    579\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mno_val_X\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mno_val_y\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator, input_name)\u001b[0m\n\u001b[1;32m    877\u001b[0m             \u001b[0;31m# If input is 1D raise error\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    878\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 879\u001b[0;31m                 raise ValueError(\n\u001b[0m\u001b[1;32m    880\u001b[0m                     \u001b[0;34m\"Expected 2D array, got 1D array instead:\\narray={}.\\n\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    881\u001b[0m                     \u001b[0;34m\"Reshape your data either using array.reshape(-1, 1) if \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Expected 2D array, got 1D array instead:\narray=[  0.           2.04081633   4.08163265   6.12244898   8.16326531\n  10.20408163  12.24489796  14.28571429  16.32653061  18.36734694\n  20.40816327  22.44897959  24.48979592  26.53061224  28.57142857\n  30.6122449   32.65306122  34.69387755  36.73469388  38.7755102\n  40.81632653  42.85714286  44.89795918  46.93877551  48.97959184\n  51.02040816  53.06122449  55.10204082  57.14285714  59.18367347\n  61.2244898   63.26530612  65.30612245  67.34693878  69.3877551\n  71.42857143  73.46938776  75.51020408  77.55102041  79.59183673\n  81.63265306  83.67346939  85.71428571  87.75510204  89.79591837\n  91.83673469  93.87755102  95.91836735  97.95918367 100.        ].\nReshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."]},"2":{"data":{"image/png":"541626144f8847434952a895202fa89af62b43b2","text/plain":"<Figure size 1440x1440 with 1 Axes>"},"exec_count":43,"metadata":{"image/png":{"height":1133,"width":1175},"needs_background":"light"},"output_type":"execute_result"}},"pos":59,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":45,"id":"826864","input":"plt.scatter(noEducationDF[noEducationDF['income']<75000]['white'],noEducationDF[noEducationDF['income']<75000]['badPhysicalHealth%'],c=noEducationDF[noEducationDF['income']<75000]['income'])\nplt.xlabel('% White')\nplt.ylabel('Bad Physical Health Percentage')\nplt.title('% White vs Bad Physical Health', fontsize=30)\nx_linspace = np.linspace(0, 100, 100)\nlm = sklearn.linear_model.LinearRegression()\nX_train = np.array(noEducationDF[noEducationDF['income']<75000]['white']).reshape(-1, 1)\ny_train = np.array(noEducationDF[noEducationDF['income']<75000]['badPhysicalHealth%'])\nlm.fit(X_train, y_train)\ny_linspace = lm.predict(x_linspace.reshape(-1, 1))\nplt.plot(x_linspace, y_linspace, color=\"red\", linewidth=5)\nplt.show()\n\nplt.scatter(noEducationDF[noEducationDF['income']<75000]['black'],noEducationDF[noEducationDF['income']<75000]['badPhysicalHealth%'],c=noEducationDF[noEducationDF['income']<75000]['income'])\nplt.xlabel('% Black')\nplt.ylabel('Bad Physical Health Percentage')\nplt.title('% Black vs Bad Physical Health', fontsize=30)\nx_linspace = np.linspace(0, 100, 100)\nlm = sklearn.linear_model.LinearRegression()\nX_train = np.array(noEducationDF[noEducationDF['income']<75000]['black']).reshape(-1, 1)\ny_train = np.array(noEducationDF[noEducationDF['income']<75000]['badPhysicalHealth%'])\nlm.fit(X_train, y_train)\ny_linspace = lm.predict(x_linspace.reshape(-1, 1))\nplt.plot(x_linspace, y_linspace, color=\"red\", linewidth=5)\nplt.show()\n\nplt.scatter(noEducationDF[noEducationDF['income']<75000]['native'],noEducationDF[noEducationDF['income']<75000]['badPhysicalHealth%'],c=noEducationDF[noEducationDF['income']<75000]['income'])\nplt.xlabel('% Native')\nplt.ylabel('Bad Physical Health Percentage')\nplt.title('% Native American vs Bad Physical Health', fontsize=30)\nx_linspace = np.linspace(0, 100, 100)\nlm = sklearn.linear_model.LinearRegression()\nX_train = np.array(noEducationDF[noEducationDF['income']<75000]['native']).reshape(-1, 1)\ny_train = np.array(noEducationDF[noEducationDF['income']<75000]['badPhysicalHealth%'])\nlm.fit(X_train, y_train)\ny_linspace = lm.predict(x_linspace.reshape(-1, 1))\nplt.plot(x_linspace, y_linspace, color=\"red\", linewidth=5)\nplt.show()\n\nplt.scatter(noEducationDF[noEducationDF['income']<75000][noEducationDF['asian']>0.1]['asian'],noEducationDF[noEducationDF['income']<75000][noEducationDF['asian']>0.1]['badPhysicalHealth%'],c=noEducationDF[noEducationDF['income']<75000][noEducationDF['asian']>0.1]['income'])\nplt.xlabel('% Asian')\nplt.ylabel('Bad Physical Health Percentage')\nplt.title('% Asian American vs Bad Physical Health', fontsize=30)\nx_linspace = np.linspace(0, 100, 100)\nlm = sklearn.linear_model.LinearRegression()\nX_train = np.array(noEducationDF[noEducationDF['income']<75000][noEducationDF['asian']>0.1]['asian']).reshape(-1, 1)\ny_train = np.array(noEducationDF[noEducationDF['income']<75000][noEducationDF['asian']>0.1]['badPhysicalHealth%'])\nlm.fit(X_train, y_train)\ny_linspace = lm.predict(x_linspace.reshape(-1, 1))\nplt.plot(x_linspace, y_linspace, color=\"red\", linewidth=5)\nplt.show()\n\nplt.scatter(noEducationDF[noEducationDF['asian']>0.1]['hispanic'],noEducationDF[noEducationDF['income']<75000]['badPhysicalHealth%'],c=noEducationDF[noEducationDF['asian']>0.1]['income'])\nplt.xlabel('% Hispanic')\nplt.ylabel('Bad Physical Health Percentage')\nplt.title('% Hispanic American vs Bad Physical Health', fontsize=30)\nx_linspace = np.linspace(0, 100, 100)\nlm = sklearn.linear_model.LinearRegression()\nX_train = np.array(noEducationDF[noEducationDF['asian']>0.1]['hispanic']).reshape(-1, 1)\ny_train = np.array(noEducationDF[noEducationDF['asian']>0.1]['badPhysicalHealth%'])\nlm.fit(X_train, y_train)\ny_linspace = lm.predict(x_linspace.reshape(-1, 1))\nplt.plot(x_linspace, y_linspace, color=\"red\", linewidth=5)\nplt.show()\n\nf = plt.figure()\nf.set_figwidth(1)\nf.set_figheight(5)\nplt.scatter(np.zeros_like(noEducationDF[noEducationDF['income']<75000]['income']),noEducationDF[noEducationDF['income']<75000]['income'],c=noEducationDF[noEducationDF['income']<75000]['income'],s=500,marker=\"s\")\nplt.xticks([])\nplt.title('Income Color Scale', fontsize=30)\nplt.show()","output":{"0":{"data":{"image/png":"9529b949e5f25f7cfc9961754748298f9ba0e245","text/plain":"<Figure size 1440x1440 with 1 Axes>"},"exec_count":45,"metadata":{"image/png":{"height":1161,"width":1163},"needs_background":"light"},"output_type":"execute_result"},"1":{"data":{"image/png":"bb151e9447cce93fd0e3922fce7b22d14591b65a","text/plain":"<Figure size 1440x1440 with 1 Axes>"},"exec_count":45,"metadata":{"image/png":{"height":1161,"width":1163},"needs_background":"light"},"output_type":"execute_result"},"2":{"data":{"image/png":"64c215d7951cf37b837da1b5cae730c9c2bac569","text/plain":"<Figure size 1440x1440 with 1 Axes>"},"exec_count":45,"metadata":{"image/png":{"height":1161,"width":1163},"needs_background":"light"},"output_type":"execute_result"},"3":{"name":"stderr","output_type":"stream","text":"/tmp/ipykernel_22304/2305306217.py:40: UserWarning: Boolean Series key will be reindexed to match DataFrame index.\n  plt.scatter(noEducationDF[noEducationDF['income']<75000][noEducationDF['asian']>0.1]['asian'],noEducationDF[noEducationDF['income']<75000][noEducationDF['asian']>0.1]['badPhysicalHealth%'],c=noEducationDF[noEducationDF['income']<75000][noEducationDF['asian']>0.1]['income'])\n/tmp/ipykernel_22304/2305306217.py:46: UserWarning: Boolean Series key will be reindexed to match DataFrame index.\n  X_train = np.array(noEducationDF[noEducationDF['income']<75000][noEducationDF['asian']>0.1]['asian']).reshape(-1, 1)\n/tmp/ipykernel_22304/2305306217.py:47: UserWarning: Boolean Series key will be reindexed to match DataFrame index.\n  y_train = np.array(noEducationDF[noEducationDF['income']<75000][noEducationDF['asian']>0.1]['badPhysicalHealth%'])\n"},"4":{"data":{"image/png":"d335624cf7c799a38227aaf87bf0666801f7e30e","text/plain":"<Figure size 1440x1440 with 1 Axes>"},"exec_count":45,"metadata":{"image/png":{"height":1161,"width":1163},"needs_background":"light"},"output_type":"execute_result"},"5":{"ename":"ValueError","evalue":"x and y must be the same size","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_22304/2305306217.py\u001b[0m in \u001b[0;36m<cell line: 53>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     51\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     52\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 53\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnoEducationDF\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnoEducationDF\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'asian'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m>\u001b[0m\u001b[0;36m0.1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'hispanic'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mnoEducationDF\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnoEducationDF\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'income'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m<\u001b[0m\u001b[0;36m75000\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'badPhysicalHealth%'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnoEducationDF\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnoEducationDF\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'asian'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m>\u001b[0m\u001b[0;36m0.1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'income'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     54\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'% Hispanic'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     55\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Bad Physical Health Percentage'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/matplotlib/pyplot.py\u001b[0m in \u001b[0;36mscatter\u001b[0;34m(x, y, s, c, marker, cmap, norm, vmin, vmax, alpha, linewidths, edgecolors, plotnonfinite, data, **kwargs)\u001b[0m\n\u001b[1;32m   2817\u001b[0m         \u001b[0mvmin\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvmax\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0malpha\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlinewidths\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2818\u001b[0m         edgecolors=None, plotnonfinite=False, data=None, **kwargs):\n\u001b[0;32m-> 2819\u001b[0;31m     __ret = gca().scatter(\n\u001b[0m\u001b[1;32m   2820\u001b[0m         \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmarker\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmarker\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcmap\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcmap\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnorm\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnorm\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2821\u001b[0m         \u001b[0mvmin\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvmin\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvmax\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvmax\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0malpha\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0malpha\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlinewidths\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlinewidths\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/matplotlib/__init__.py\u001b[0m in \u001b[0;36minner\u001b[0;34m(ax, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1410\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0minner\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1411\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1412\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msanitize_sequence\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1413\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1414\u001b[0m         \u001b[0mbound\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnew_sig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbind\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/matplotlib/axes/_axes.py\u001b[0m in \u001b[0;36mscatter\u001b[0;34m(self, x, y, s, c, marker, cmap, norm, vmin, vmax, alpha, linewidths, edgecolors, plotnonfinite, **kwargs)\u001b[0m\n\u001b[1;32m   4360\u001b[0m         \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mravel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4361\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4362\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"x and y must be the same size\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4363\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4364\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0ms\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: x and y must be the same size"]},"6":{"data":{"image/png":"f33511dda43b521515168739f2f7c1579de1ab37","text/plain":"<Figure size 1440x1440 with 1 Axes>"},"exec_count":45,"metadata":{"image/png":{"height":1121,"width":1161},"needs_background":"light"},"output_type":"execute_result"}},"pos":44,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":46,"id":"2ed9e2","input":"plt.scatter(noEducationDF[noEducationDF['asian']>0.1]['asian'],noEducationDF[noEducationDF['asian']>0.1]['badPhysicalHealth%'],c=noEducationDF[noEducationDF['asian']>0.1]['income'])\nplt.xlabel('% Hispanic')\nplt.ylabel('Bad Physical Health Percentage')\nplt.title('% Hispanic American vs Bad Physical Health', fontsize=30)\nx_linspace = np.linspace(0, 100, 100)\nlm = sklearn.linear_model.LinearRegression()\nX_train = np.array(noEducationDF[noEducationDF['asian']>0.1]['asian']).reshape(-1, 1)\ny_train = np.array(noEducationDF[noEducationDF['asian']>0.1]['badPhysicalHealth%'])\nlm.fit(X_train, y_train)\ny_linspace = lm.predict(x_linspace.reshape(-1, 1))\nplt.plot(x_linspace, y_linspace, color=\"red\", linewidth=5)\nplt.show()","output":{"0":{"data":{"image/png":"2b58aa44c0c8497c9cd85c8d79bded00fa4cd0a0","text/plain":"<Figure size 1440x1440 with 1 Axes>"},"exec_count":46,"metadata":{"image/png":{"height":1161,"width":1163},"needs_background":"light"},"output_type":"execute_result"}},"pos":45,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":5,"id":"c8060e","input":"from sklearn.linear_model import LinearRegression\n\n### Set of all inputs and outputs we seek to discover the relationship between\nXvals = ['professional', 'service', 'office', 'construction', 'production']\nYvals = ['badPhysicalHealth%','badMentalHealth%']\n\n### Set graph size\nplt.rcParams[\"figure.figsize\"] = (10,4)\n\nfor x in Xvals:\n    for y in Yvals:\n        ### Find and plot the points\n        plt.scatter(noEducationDF[x],noEducationDF[y],s=0.1)\n        plt.title(y + \" vs \" + x)\n        plt.ylabel(y)\n        plt.xlabel(x)\n        \n        ### Find and plot optimal line through the points\n        astar,bstar = regression_parameters(np.array(noEducationDF[x]),np.array(noEducationDF[y]))\n        plt.plot(np.linspace(0,80),astar*np.linspace(0,80)+bstar,color='orange')\n        \n        ### Find and plot mean rates regardless of job sector for reference\n        meanRate = np.sum(np.array(noEducationDF[y]))/len(noEducationDF[y])\n        plt.plot(np.linspace(0,80),[meanRate]*50,color='yellow')\n        plt.show()","output":{"0":{"data":{"image/png":"301a8b64b2a617855eb5ecc438d42d5c2391610e","text/plain":"<Figure size 720x288 with 1 Axes>"},"exec_count":5,"metadata":{"image/png":{"height":277,"width":605},"needs_background":"light"},"output_type":"execute_result"},"1":{"data":{"image/png":"733e1b212f71b2c336b71892a9916b9079a135d1","text/plain":"<Figure size 720x288 with 1 Axes>"},"exec_count":5,"metadata":{"image/png":{"height":277,"width":605},"needs_background":"light"},"output_type":"execute_result"},"2":{"data":{"image/png":"311bdc3eb056f381b8a9ef440e8757026db63d4b","text/plain":"<Figure size 720x288 with 1 Axes>"},"exec_count":5,"metadata":{"image/png":{"height":277,"width":605},"needs_background":"light"},"output_type":"execute_result"},"3":{"data":{"image/png":"caa0564e6705cd82ee83ea0d18464c482dbfb5ca","text/plain":"<Figure size 720x288 with 1 Axes>"},"exec_count":5,"metadata":{"image/png":{"height":277,"width":605},"needs_background":"light"},"output_type":"execute_result"},"4":{"data":{"image/png":"94f9fd01220befeb360ce7ca84a9d6fef40271e0","text/plain":"<Figure size 720x288 with 1 Axes>"},"exec_count":5,"metadata":{"image/png":{"height":277,"width":605},"needs_background":"light"},"output_type":"execute_result"},"5":{"data":{"image/png":"d3b7809eb5b6e662f5ba0c14d042e56561d8e515","text/plain":"<Figure size 720x288 with 1 Axes>"},"exec_count":5,"metadata":{"image/png":{"height":277,"width":605},"needs_background":"light"},"output_type":"execute_result"},"6":{"data":{"image/png":"e38f67455a401769d911db54320f8fb4f159ef05","text/plain":"<Figure size 720x288 with 1 Axes>"},"exec_count":5,"metadata":{"image/png":{"height":277,"width":605},"needs_background":"light"},"output_type":"execute_result"},"7":{"data":{"image/png":"abc1d1dac230926bd3ae8d942d2a8435d4ff7831","text/plain":"<Figure size 720x288 with 1 Axes>"},"exec_count":5,"metadata":{"image/png":{"height":277,"width":605},"needs_background":"light"},"output_type":"execute_result"},"8":{"data":{"image/png":"757c3f07883a20a4bcc89fc1f9d7d7375a4c4af6","text/plain":"<Figure size 720x288 with 1 Axes>"},"exec_count":5,"metadata":{"image/png":{"height":277,"width":605},"needs_background":"light"},"output_type":"execute_result"},"9":{"data":{"image/png":"46b68672de26267949bb59e4d0c6c39cc19a6111","text/plain":"<Figure size 720x288 with 1 Axes>"},"exec_count":5,"metadata":{"image/png":{"height":277,"width":605},"needs_background":"light"},"output_type":"execute_result"}},"pos":7,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":6,"id":"d2d1f6","input":"def create_regions(initials):\n    midwest = [\"ND\", \"SD\", \"MN\", \"IA\", \"MO\", \"KS\", \"WI\", \"IL\", \"IN\", \"MI\", \"OH\", \"NE\"]\n    west = [\"CA\", \"OR\", \"WA\", \"ID\", \"MT\", \"WY\", \"UT\", \"CO\", \"NM\", \"AZ\", \"AK\", \"HI\", \"NV\"]\n    south = [\"TX\", \"OK\", \"AR\", \"LA\", \"KY\", \"TN\", \"MS\", \"AL\", \"WV\", \"DE\", \"MD\", \"DC\", \"VA\", \"NC\", \"SC\", \"GA\", \"FL\"]\n    northeast = [\"PA\", \"NY\", \"VT\", \"NH\", \"MA\", \"CT\", \"RI\", \"ME\"]\n    regions = []\n    for initial in initials:\n        if initial in midwest:\n            regions.append(\"MW\")\n        elif initial in west:\n            regions.append(\"W\")\n        elif initial in south:\n            regions.append(\"S\")\n        elif initial in northeast:\n            regions.append(\"NE\")\n        else:\n            #Sanity check (seeing if there is unclassified data)\n            regions.append(\"\")\n    return regions","pos":11,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":7,"id":"a53228","input":"noEducationDF[\"regionInitials\"] = create_regions(noEducationDF.stateInitials)","pos":12,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":8,"id":"c48165","input":"#No data is unclassified\nnoEducationDF.regionInitials.value_counts()","output":{"0":{"data":{"text/plain":"S     25821\nMW    16882\nW     15810\nNE    11279\nName: regionInitials, dtype: int64"},"exec_count":8,"output_type":"execute_result"}},"pos":13,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":9,"id":"41a554","input":"regions = noEducationDF.groupby(\"regionInitials\")\n","pos":14,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"09dd02","input":"0. Import Packages that are necessary for successful data analytics\n\n","pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"0f1757","input":"We can deduce from the lines of best fit in comparison to the mean line two major takeaways. First, there is a similar distribution of bad physical and mental health across these counties, which suggests that it is important to not only invest in hospitals and medical centers, but to invest in mental health resources as well. Additionally, we deduce a strong correlation between specific job sectors and health outcomes. Specifically, there is a noticeable positive correlation between the percentage of people working in production, construction, and service and their prevalence of bad health. Additionally, there is a noticeable negative correlation between percentage of people with professional jobs and the prevalence of bad health. \n\n","pos":8,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"2586da","input":"These graphs clearly show that income is a more potent and reliable indicator of outcomes than having health insurance, but poorer people are less likely to have health insurance, and so having health insurance is still an indicator of outcomes. https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4351276/ backs this up, stating that two large reasons that people fail to seek preventative healthcare include high cost and lack of insurance (the third being time wasted).","pos":49,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"45baa8","input":"### It makes much more sense to analyze over-performing outliers based on county. While our data is in tracts, there are multiple problems with analyzing tract performance. For one, it's much harder to reference as we don't have tract names. Secondly, some tracts can have incredibly small populations, making it easier for them to stick out as outliers. Finally, since tracts are so small, it's very likely that residents of a specific tract attend schools, jobs, and medical centers at different tracts within their county, so a measure of the medical status of people in the tract isn't exactly the measure of the tract's \"ability\" to reduce medical conditions.","pos":24,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"4609eb","input":"One thing we could do is convert states into specific regions of the US. While these regions aren't exactly rigid, they all have different geographical, economic, and political identities that could explain some patterns.\n\n","pos":10,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"83abb6","input":"First, we will analyse the correlation between job sector and both physical and mental health. To do this, we will first create a dataset containing only the data concerning this question. We will then create graphs for each job sector against bad mental and physical health rates to see correlations between each industry and their health outcomes\n\n","pos":5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"856684","input":"","pos":31,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"ac7763","input":"### Another test we can run is to see if there is a direct relationship between having health insurance and health outcomes.\n\n","pos":38,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"aeed98","input":"1. Import Dataset and create a heat map of all of the attributes...\n\n","pos":2,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"f89fee","input":"Exploring variation in health, education, and income by location.\n","pos":9,"state":"done","type":"cell"}
{"id":0,"time":1658932945374,"type":"user"}
{"last_load":1658857148279,"type":"file"}